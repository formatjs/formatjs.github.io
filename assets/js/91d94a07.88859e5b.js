(self.webpackChunk=self.webpackChunk||[]).push([[3147],{3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>c,kt:()=>p});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var l=n.createContext({}),m=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=m(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),g=m(a),p=s,u=g["".concat(l,".").concat(p)]||g[p]||d[p]||r;return a?n.createElement(u,i(i({ref:t},c),{},{components:a})):n.createElement(u,i({ref:t},c))}));function p(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,i=new Array(r);i[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var m=2;m<r;m++)i[m]=a[m];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},1381:(e,t,a)=>{"use strict";a.r(t),a.d(t,{frontMatter:()=>o,metadata:()=>l,toc:()=>m,default:()=>d});var n=a(2122),s=a(9756),r=(a(7294),a(3905)),i=["components"],o={id:"message-declaration",title:"Message Declaration"},l={unversionedId:"getting-started/message-declaration",id:"getting-started/message-declaration",isDocsHomePage:!1,title:"Message Declaration",description:"While you can declare your messages using only ids, we highly recommend declaring defaultMessages inline along with their usages because of the following reasons:",source:"@site/docs/getting-started/message-declaration.md",sourceDirName:"getting-started",slug:"/getting-started/message-declaration",permalink:"/docs/getting-started/message-declaration",editUrl:"https://github.com/formatjs/formatjs/edit/main/website/docs/getting-started/message-declaration.md",version:"current",frontMatter:{id:"message-declaration",title:"Message Declaration"},sidebar:"docs",previous:{title:"Application Workflow",permalink:"/docs/getting-started/application-workflow"},next:{title:"Message Extraction",permalink:"/docs/getting-started/message-extraction"}},m=[{value:"Using imperative API <code>intl.formatMessage</code>",id:"using-imperative-api-intlformatmessage",children:[]},{value:"Using React API <code>&lt;FormattedMessage/&gt;</code>",id:"using-react-api-formattedmessage",children:[]},{value:"Using Vue API &amp; template methods such as <code>$formatMessage</code>",id:"using-vue-api--template-methods-such-as-formatmessage",children:[]},{value:"Pre-declaring using <code>defineMessage</code> for later consumption (less recommended)",id:"pre-declaring-using-definemessage-for-later-consumption-less-recommended",children:[]}],c={toc:m};function d(e){var t=e.components,a=(0,s.Z)(e,i);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"While you can declare your messages using only ",(0,r.kt)("inlineCode",{parentName:"p"},"id"),"s, we highly recommend declaring ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultMessage"),"s inline along with their usages because of the following reasons:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Messages colocated with their usages become self-managed, as their usages change/removed, so are the messages."),(0,r.kt)("li",{parentName:"ol"},"Messages are highly contextual. We've seen a lot of cases where developers assume a certain grammar when they write their messages. Buttons/Call-To-Actions and labels are also translated differently."),(0,r.kt)("li",{parentName:"ol"},"Text styling is also dependent on the message itself. Things like truncation, capitalization... certainly affect the messages themselves."),(0,r.kt)("li",{parentName:"ol"},"Better integrations with toolchains. Most toolchains cannot verify cross-file references to validate syntax/usage.")),(0,r.kt)("p",null,"At a high level, formatjs messages use ",(0,r.kt)("a",{parentName:"p",href:"/docs/core-concepts/icu-syntax"},"ICU Syntax")," with a couple of enhancements common in other message format such as ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/projectfluent/fluent.js/"},"Fluent"),". This section focuses on the actual supported ways of calling ",(0,r.kt)("inlineCode",{parentName:"p"},"formatjs")," APIs so messages can be extracted."),(0,r.kt)("h2",{id:"using-imperative-api-intlformatmessage"},"Using imperative API ",(0,r.kt)("inlineCode",{parentName:"h2"},"intl.formatMessage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"// Method must be exactly `intl.formatMessage`\nintl.formatMessage(\n  {\n    description: 'A message', // Description should be a string literal\n    defaultMessage: 'My name is {name}', // Message should be a string literal\n  },\n  {\n    name: userName,\n  } // Values should be an object literal, but not necessarily every value inside\n)\n")),(0,r.kt)("h2",{id:"using-react-api-formattedmessage"},"Using React API ",(0,r.kt)("inlineCode",{parentName:"h2"},"<FormattedMessage/>")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {FormattedMessage} from \'react-intl\'\n;<FormattedMessage\n  description="A message" // Description should be a string literal\n  defaultMessage="My name is {name}" // Message should be a string literal\n  values={\n    {\n      name: userName,\n    } // Values should be an object literal, but not necessarily every value inside\n  }\n/>\n')),(0,r.kt)("h2",{id:"using-vue-api--template-methods-such-as-formatmessage"},"Using Vue API & template methods such as ",(0,r.kt)("inlineCode",{parentName:"h2"},"$formatMessage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-vue"},"<template>\n  <p>{{ $formatNumber(3, {style: 'currency', currency: 'USD'}) }}</p>\n</template>\n")),(0,r.kt)("h2",{id:"pre-declaring-using-definemessage-for-later-consumption-less-recommended"},"Pre-declaring using ",(0,r.kt)("inlineCode",{parentName:"h2"},"defineMessage")," for later consumption (less recommended)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import {defineMessage} from 'react-intl'\nconst message = defineMessage({\n  description: 'A message', // Description should be a string literal\n  defaultMessage: 'My name is {name}', // Message should be a string literal\n})\n\nintl.formatMessage(message, {name: 'John'}) // My name is John\n\n<FormattedMessage\n  {...message}\n  values={{\n    name: 'John',\n  }}\n/> // My name is John\n")),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"We rely on AST to extract messages from the codebase, so make sure you call ",(0,r.kt)("inlineCode",{parentName:"p"},"intl.formatMessage()"),", use our builtin React components, use our Vue methods or configure ",(0,r.kt)("a",{parentName:"p",href:"/docs/tooling/cli#--additional-function-names-comma-separated-names"},(0,r.kt)("inlineCode",{parentName:"a"},"additionalFunctionNames")),"/",(0,r.kt)("a",{parentName:"p",href:"/docs/tooling/cli#--additional-component-names-comma-separated-names"},(0,r.kt)("inlineCode",{parentName:"a"},"additionalComponentNames"))," properly."))),(0,r.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"You can declare a message without immediately formatting it with ",(0,r.kt)("inlineCode",{parentName:"p"},"defineMessage")," and our extractor would still be able to extract it. However, our ",(0,r.kt)("a",{parentName:"p",href:"/docs/tooling/linter#enforce-placeholders"},"enforce-placeholders")," linter rule won't be able to analyze it."))))}d.isMDXComponent=!0}}]);