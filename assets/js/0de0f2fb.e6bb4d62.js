(self.webpackChunk=self.webpackChunk||[]).push([[8001],{3905:(e,t,a)=>{"use strict";a.d(t,{Zo:()=>m,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,h=c["".concat(s,".").concat(u)]||c[u]||d[u]||i;return a?n.createElement(h,o(o({ref:t},m),{},{components:a})):n.createElement(h,o({ref:t},m))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},1959:(e,t,a)=>{"use strict";a.r(t),a.d(t,{frontMatter:()=>l,metadata:()=>s,toc:()=>p,default:()=>d});var n=a(2122),r=a(9756),i=(a(7294),a(3905)),o=["components"],l={id:"components",title:"Components"},s={unversionedId:"react-intl/components",id:"react-intl/components",isDocsHomePage:!1,title:"Components",description:"React Intl has a set of React components that provide a declarative way to setup an i18n context and format dates, numbers, and strings for display in a web UI. The components render React elements by building on React Intl's imperative API.",source:"@site/docs/react-intl/components.md",sourceDirName:"react-intl",slug:"/react-intl/components",permalink:"/docs/react-intl/components",editUrl:"https://github.com/formatjs/formatjs/edit/main/website/docs/react-intl/components.md",version:"current",frontMatter:{id:"components",title:"Components"},sidebar:"api",previous:{title:"Overview",permalink:"/docs/react-intl"},next:{title:"Imperative API",permalink:"/docs/react-intl/api"}},p=[{value:"Why Components?",id:"why-components",children:[]},{value:"IntlProvider",id:"intlprovider",children:[{value:"locale, formats, and messages",id:"locale-formats-and-messages",children:[]},{value:"defaultLocale and defaultFormats",id:"defaultlocale-and-defaultformats",children:[]},{value:"textComponent",id:"textcomponent",children:[]},{value:"onError",id:"onerror",children:[]},{value:"wrapRichTextChunksInFragment",id:"wraprichtextchunksinfragment",children:[]},{value:"defaultRichTextElements",id:"defaultrichtextelements",children:[]}]},{value:"RawIntlProvider",id:"rawintlprovider",children:[]},{value:"FormattedDate",id:"formatteddate",children:[]},{value:"FormattedDateParts",id:"formatteddateparts",children:[]},{value:"FormattedTime",id:"formattedtime",children:[]},{value:"FormattedTimeParts",id:"formattedtimeparts",children:[]},{value:"FormattedDateTimeRange",id:"formatteddatetimerange",children:[]},{value:"FormattedRelativeTime",id:"formattedrelativetime",children:[]},{value:"FormattedNumber",id:"formattednumber",children:[]},{value:"FormattedNumberParts",id:"formattednumberparts",children:[]},{value:"FormattedPlural",id:"formattedplural",children:[]},{value:"FormattedList",id:"formattedlist",children:[]},{value:"FormattedListParts",id:"formattedlistparts",children:[]},{value:"FormattedDisplayName",id:"formatteddisplayname",children:[]},{value:"FormattedMessage",id:"formattedmessage",children:[{value:"Message Syntax",id:"message-syntax",children:[]},{value:"Message Descriptor",id:"message-descriptor",children:[]},{value:"Message Formatting Fallbacks",id:"message-formatting-fallbacks",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Rich Text Formatting",id:"rich-text-formatting",children:[]},{value:"Function as the child",id:"function-as-the-child",children:[]}]}],m={toc:p};function d(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"React Intl has a set of React components that provide a declarative way to setup an i18n context and format dates, numbers, and strings for display in a web UI. The components render React elements by building on React Intl's imperative ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api"},"API"),"."),(0,i.kt)("h2",{id:"why-components"},"Why Components?"),(0,i.kt)("p",null,"Beyond providing an idiomatic-React way of integrating internationalization into a React app, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Formatted*>")," components have benefits over always using the imperative API directly:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Render React elements that seamlessly compose with other React components."),(0,i.kt)("li",{parentName:"ul"},"Support rich-text string/message formatting in ",(0,i.kt)("inlineCode",{parentName:"li"},"<FormattedMessage>"),"."),(0,i.kt)("li",{parentName:"ul"},"Implement advanced features like ",(0,i.kt)("inlineCode",{parentName:"li"},"<FormattedRelativeTime>"),"'s updating over time."),(0,i.kt)("li",{parentName:"ul"},"Provide TypeScript type definitions.")),(0,i.kt)("h2",{id:"intlprovider"},"IntlProvider"),(0,i.kt)("p",null,"React Intl uses the provider pattern to scope an i18n context to a tree of components. This allows configuration like the current locale and set of translated strings/messages to be provided at the root of a component tree and made available to the ",(0,i.kt)("inlineCode",{parentName:"p"},"<Formatted*>")," components. This is the same concept as what Flux frameworks like ",(0,i.kt)("a",{parentName:"p",href:"http://redux.js.org/"},"Redux")," use to provide access to a store within a component tree."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"All apps using React Intl must use the ",(0,i.kt)("inlineCode",{parentName:"p"},"<IntlProvider>")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"<RawIntlProvider>")," component."))),(0,i.kt)("p",null,"This component is used to setup the i18n context for a tree. Usually, this component will wrap an app's root component so that the entire app will be within the configured i18n context. The following are the i18n configuration props that can be set:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"interface IntlConfig {\n  locale: string\n  formats: CustomFormats\n  messages: Record<string, string> | Record<string, MessageFormatElement[]>\n  defaultLocale: string\n  defaultFormats: CustomFormats\n  timeZone?: string\n  textComponent?: React.ComponentType | keyof React.ReactHTML\n  wrapRichTextChunksInFragment?: boolean\n  defaultRichTextElements?: Record<string, FormatXMLElementFn<React.ReactNode>>\n  onError(err: string): void\n}\n")),(0,i.kt)("h3",{id:"locale-formats-and-messages"},"locale, formats, and messages"),(0,i.kt)("p",null,"The user's current locale and what the app should be rendered in. While ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultLocale")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultFormats")," are for fallbacks or during development and represent the app's default. Notice how there is no ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultMessages"),", that's because each ",(0,i.kt)("a",{parentName:"p",href:"#message-descriptor"},"Message Descriptor")," provides a ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultMessage"),"."),(0,i.kt)("h3",{id:"defaultlocale-and-defaultformats"},"defaultLocale and defaultFormats"),(0,i.kt)("p",null,"Default locale & formats for when a message is not translated (missing from ",(0,i.kt)("inlineCode",{parentName:"p"},"messages"),"). ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultLocale")," should be the locale that ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultMessage"),"s are declared in so that a sentence is coherent in a single locale. Without ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultLocale")," and/or if it's set incorrectly, you might run into scenario where a sentence is in English but embeded date/time is in Spanish."),(0,i.kt)("h3",{id:"textcomponent"},"textComponent"),(0,i.kt)("p",null,"Provides a way to configure the default wrapper for React Intl's ",(0,i.kt)("inlineCode",{parentName:"p"},"<Formatted*>")," components. If not specified, ",(0,i.kt)("a",{parentName:"p",href:"https://reactjs.org/docs/fragments.html"},(0,i.kt)("inlineCode",{parentName:"a"},"<React.Fragment>"))," is used. Before V3, ",(0,i.kt)("inlineCode",{parentName:"p"},"span")," was used instead; check the ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/upgrade-guide-3x"},"migration guide")," for more info."),(0,i.kt)("h3",{id:"onerror"},"onError"),(0,i.kt)("p",null,"Allows the user to provide a custom error handler. By default, error messages are logged using ",(0,i.kt)("inlineCode",{parentName:"p"},"console.error")," if ",(0,i.kt)("inlineCode",{parentName:"p"},"NODE_ENV")," is not set to ",(0,i.kt)("inlineCode",{parentName:"p"},"production"),"."),(0,i.kt)("h3",{id:"wraprichtextchunksinfragment"},"wrapRichTextChunksInFragment"),(0,i.kt)("p",null,"When formatting rich text message, the output we produced is of type ",(0,i.kt)("inlineCode",{parentName:"p"},"Array<string | React.ReactElement>"),", which will trigger key error. This wraps the output in a single ",(0,i.kt)("inlineCode",{parentName:"p"},"React.Fragment")," to suppress that."),(0,i.kt)("h3",{id:"defaultrichtextelements"},"defaultRichTextElements"),(0,i.kt)("p",null,"A map of tag to rich text formatting function. This is meant to provide a centralized way to format common tags such as ",(0,i.kt)("inlineCode",{parentName:"p"},"<b>"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"<p>"),"... or enforcing certain Design System in the codebase (e.g standardized ",(0,i.kt)("inlineCode",{parentName:"p"},"<a>")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"<button>"),"...). See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/formatjs/formatjs/issues/1752"},"https://github.com/formatjs/formatjs/issues/1752")," for more context."),(0,i.kt)("p",null,"These configuration props are combined with the ",(0,i.kt)("inlineCode",{parentName:"p"},"<IntlProvider>"),"'s component-specific props:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"props: IntlConfig &\n  {\n    children: ReactNode,\n  }\n")),(0,i.kt)("p",null,"Finally, child elements ",(0,i.kt)("em",{parentName:"p"},"must")," be supplied to ",(0,i.kt)("inlineCode",{parentName:"p"},"<IntlProvider>"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},'const App = ({importantDate}) => (\n  <div>\n    <FormattedDate\n      value={importantDate}\n      year="numeric"\n      month="long"\n      day="numeric"\n      weekday="long"\n    />\n  </div>\n)\n\nReactDOM.render(\n  <IntlProvider locale={navigator.language}>\n    <App importantDate={new Date(1459913574887)} />\n  </IntlProvider>,\n  document.getElementById(\'container\')\n)\n')),(0,i.kt)("p",null,"Assuming ",(0,i.kt)("inlineCode",{parentName:"p"},"navigator.language")," is ",(0,i.kt)("inlineCode",{parentName:"p"},'"fr"'),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<div>mardi 5 avril 2016</div>\n")),(0,i.kt)("h2",{id:"rawintlprovider"},"RawIntlProvider"),(0,i.kt)("p",null,"This is the underlying ",(0,i.kt)("inlineCode",{parentName:"p"},"React.Context.Provider")," object that ",(0,i.kt)("inlineCode",{parentName:"p"},"IntlProvider")," use. It can be used in conjunction with ",(0,i.kt)("inlineCode",{parentName:"p"},"createIntl"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"import {createIntl, createIntlCache, RawIntlProvider} from 'react-intl'\n\n// This is optional but highly recommended\n// since it prevents memory leak\nconst cache = createIntlCache()\n\nconst intl = createIntl({\n  locale: 'fr-FR',\n  messages: {}\n}, cache)\n\n// Pass it to IntlProvider\n<RawIntlProvider value={intl}>{foo}</RawIntlProvider>\n")),(0,i.kt)("h4",{id:"dynamic-language-selection"},"Dynamic Language Selection"),(0,i.kt)("p",null,"By default, changes to the ",(0,i.kt)("inlineCode",{parentName:"p"},"locale")," at runtime may not trigger a re-render of child elements. To solve this, and enable dynamic locale modification, add a ",(0,i.kt)("inlineCode",{parentName:"p"},"key")," property to the ",(0,i.kt)("inlineCode",{parentName:"p"},"<IntlProvider>")," and set it to the locale, which persuades React that the component has been modified:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"<IntlProvider locale={localeProp} key={localeProp} messages={messagesProp}>\n  <App />\n</IntlProvider>\n")),(0,i.kt)("p",null,"(See ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/formatjs/formatjs/issues/243"},"Issue #243"),".)"),(0,i.kt)("h2",{id:"formatteddate"},"FormattedDate"),(0,i.kt)("p",null,"This component uses the ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api#formatdate"},(0,i.kt)("inlineCode",{parentName:"a"},"formatDate"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"},(0,i.kt)("inlineCode",{parentName:"a"},"Intl.DateTimeFormat"))," APIs and has ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," that correspond to the ",(0,i.kt)("inlineCode",{parentName:"p"},"DateTimeFormatOptions")," specified above."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"props: Intl.DateTimeFormatOptions &\n  {\n    value: any,\n    format: string,\n    children: (formattedDate: string) => ReactElement,\n  }\n")),(0,i.kt)("p",null,"By default ",(0,i.kt)("inlineCode",{parentName:"p"},"<FormattedDate>")," will render the formatted date into a ",(0,i.kt)("inlineCode",{parentName:"p"},"<React.Fragment>"),". If you need to customize rendering, you can either wrap it with another React element (recommended), or pass a function as the child."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<FormattedDate value={new Date(1459832991883)} />\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example with Options:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedDate\n  value={new Date(1459832991883)}\n  year="numeric"\n  month="long"\n  day="2-digit"\n/>\n')),(0,i.kt)("h2",{id:"formatteddateparts"},"FormattedDateParts"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"browser support")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This requires ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts"},"Intl.DateTimeFormat.prototype.formatToParts")," which is not available in IE11. Please use our ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-datetimeformat"},"polyfill")," if you plan to support IE11."))),(0,i.kt)("p",null,"This component provides more customization to ",(0,i.kt)("inlineCode",{parentName:"p"},"FormattedDate")," by allowing children function to have access to underlying parts of the formatted date. The available parts are listed ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts"},"here")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"props: Intl.DateTimeFormatOptions &\n  {\n    value: any,\n    format: string,\n    children: (parts: Intl.DateTimeFormatPart[]) => ReactElement,\n  }\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedDateParts\n  value={new Date(1459832991883)}\n  year="numeric"\n  month="long"\n  day="2-digit"\n>\n  {parts => (\n    <>\n      <b>{parts[0].value}</b>\n      {parts[1].value}\n      <small>{parts[2].value}</small>\n    </>\n  )}\n</FormattedDateParts>\n')),(0,i.kt)("h2",{id:"formattedtime"},"FormattedTime"),(0,i.kt)("p",null,"This component uses the ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api#formattime"},(0,i.kt)("inlineCode",{parentName:"a"},"formatTime"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"},(0,i.kt)("inlineCode",{parentName:"a"},"Intl.DateTimeFormat"))," APIs and has ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," that correspond to the ",(0,i.kt)("inlineCode",{parentName:"p"},"DateTimeFormatOptions")," specified above, with the following defaults:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"{\n    hour: 'numeric',\n    minute: 'numeric',\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"props: DateTimeFormatOptions &\n  {\n    value: any,\n    format: string,\n    children: (formattedDate: string) => ReactElement,\n  }\n")),(0,i.kt)("p",null,"By default ",(0,i.kt)("inlineCode",{parentName:"p"},"<FormattedTime>")," will render the formatted time into a ",(0,i.kt)("inlineCode",{parentName:"p"},"React.Fragment"),". If you need to customize rendering, you can either wrap it with another React element (recommended), or pass a function as the child."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<FormattedTime value={new Date(1459832991883)} />\n")),(0,i.kt)("h2",{id:"formattedtimeparts"},"FormattedTimeParts"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"browser support")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This requires ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts"},"Intl.DateTimeFormat.prototype.formatToParts")," which is not available in IE11. Please use our ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-datetimeformat"},"polyfill")," if you plan to support IE11."))),(0,i.kt)("p",null,"This component provides more customization to ",(0,i.kt)("inlineCode",{parentName:"p"},"FormattedTime")," by allowing children function to have access to underlying parts of the formatted date. The available parts are listed ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts"},"here")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"props: Intl.DateTimeFormatOptions &\n  {\n    value: any,\n    format: string,\n    children: (parts: Intl.DateTimeFormatPart[]) => ReactElement,\n  }\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<FormattedTimeParts value={new Date(1459832991883)}>\n  {parts => (\n    <>\n      <b>{parts[0].value}</b>\n      {parts[1].value}\n      <small>{parts[2].value}</small>\n    </>\n  )}\n</FormattedTimeParts>\n")),(0,i.kt)("h2",{id:"formatteddatetimerange"},"FormattedDateTimeRange"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"browser support")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This requires stage-3 API ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-intl-DateTimeFormat-formatRange"},"Intl.RelativeTimeFormat.prototype.formatRange")," which has limited browser support. Please use our ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-datetimeformat"},"polyfill")," if you plan to support them."))),(0,i.kt)("p",null,"This component uses the ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api#formatdatetimerange"},(0,i.kt)("inlineCode",{parentName:"a"},"formatDateTimeRange"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"},(0,i.kt)("inlineCode",{parentName:"a"},"Intl.DateTimeFormat"))," APIs and has ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," that correspond to the ",(0,i.kt)("inlineCode",{parentName:"p"},"DateTimeFormatOptions")," specified above"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"props: DateTimeFormatOptions &\n  {\n    from: number | Date,\n    to: number | Date,\n    children: (formattedDate: string) => ReactElement,\n  }\n")),(0,i.kt)("p",null,"By default ",(0,i.kt)("inlineCode",{parentName:"p"},"<FormattedDateTimeRange>")," will render the formatted time into a ",(0,i.kt)("inlineCode",{parentName:"p"},"React.Fragment"),". If you need to customize rendering, you can either wrap it with another React element (recommended), or pass a function as the child."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<FormattedDateTimeRange\n  from={new Date('2020-1-1')}\n  to={new Date('2020-1-15')}\n/>\n")),(0,i.kt)("h2",{id:"formattedrelativetime"},"FormattedRelativeTime"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"browser support")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This requires ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat"},"Intl.RelativeTimeFormat")," which has limited browser support. Please use our ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-relativetimeformat"},"polyfill")," if you plan to support them."))),(0,i.kt)("p",null,"This component uses the ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api#formatrelativetime"},(0,i.kt)("inlineCode",{parentName:"a"},"formatRelativeTime"))," API and has ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," that correspond to the following relative formatting options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"type RelativeTimeFormatOptions = {\n  numeric?: 'always' | 'auto'\n  style?: 'long' | 'short' | 'narrow'\n}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Prop Types:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"props: RelativeTimeFormatOptions &\n  {\n    value: number,\n    unit: Unit,\n    format: string,\n    updateIntervalInSeconds: number,\n    children: (formattedDate: string) => ReactElement,\n  }\n")),(0,i.kt)("p",null,"By default ",(0,i.kt)("inlineCode",{parentName:"p"},"<FormattedRelativeTime>")," will render the formatted relative time into a ",(0,i.kt)("inlineCode",{parentName:"p"},"React.Fragment"),". If you need to customize rendering, you can either wrap it with another React element (recommended), or pass a function as the child."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedRelativeTime value={0} numeric="auto" updateIntervalInSeconds={1} />\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"maximum interval")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You can adjust the maximum interval that the component will re-render by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateIntervalInSeconds"),". A falsy value will turn off auto-updating. The updating is smart and will schedule the next update for the next ",(0,i.kt)("em",{parentName:"p"},"interesting moment"),"."))),(0,i.kt)("p",null,"An ",(0,i.kt)("em",{parentName:"p"},"interesting moment")," is defined as the next non-fractional ",(0,i.kt)("inlineCode",{parentName:"p"},"value")," for that ",(0,i.kt)("inlineCode",{parentName:"p"},"unit"),". For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<FormattedRelativeTime value={-50} updateIntervalInSeconds={1} />\n")),(0,i.kt)("p",null,"This will initially renders ",(0,i.kt)("inlineCode",{parentName:"p"},"59 seconds ago"),", after 1 second, will render ",(0,i.kt)("inlineCode",{parentName:"p"},"1 minute ago"),", and will not re-render until a full minute goes by, it'll render ",(0,i.kt)("inlineCode",{parentName:"p"},"2 minutes ago"),". It will not try to render ",(0,i.kt)("inlineCode",{parentName:"p"},"1.2 minutes ago"),"."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"limitation")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("inlineCode",{parentName:"p"},"updateIntervalInSeconds")," cannot be enabled for ",(0,i.kt)("inlineCode",{parentName:"p"},"unit")," longer than ",(0,i.kt)("inlineCode",{parentName:"p"},"hour")," (so not for ",(0,i.kt)("inlineCode",{parentName:"p"},"day"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"week"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"quarter"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"year"),"). This is primarily because it doesn't make sense to schedule a timeout in ",(0,i.kt)("inlineCode",{parentName:"p"},"day"),"s, and the number of ",(0,i.kt)("inlineCode",{parentName:"p"},"ms")," in a day is larger than the max timeout that ",(0,i.kt)("inlineCode",{parentName:"p"},"setTimeout")," accepts."))),(0,i.kt)("h2",{id:"formattednumber"},"FormattedNumber"),(0,i.kt)("p",null,"This component uses the ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api#formatnumber"},(0,i.kt)("inlineCode",{parentName:"a"},"formatNumber"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat"},(0,i.kt)("inlineCode",{parentName:"a"},"Intl.NumberFormat"))," APIs and has ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," that correspond to ",(0,i.kt)("inlineCode",{parentName:"p"},"Intl.NumberFormatOptions"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"props: NumberFormatOptions &\n  {\n    value: number,\n    format: string,\n    children: (formattedNumber: string) => ReactElement,\n  }\n")),(0,i.kt)("p",null,"By default ",(0,i.kt)("inlineCode",{parentName:"p"},"<FormattedNumber>")," will render the formatted number into a ",(0,i.kt)("inlineCode",{parentName:"p"},"React.Fragment"),". If you need to customize rendering, you can either wrap it with another React element (recommended), or pass a function as the child."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<FormattedNumber value={1000} />\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example Formatting Currency Values")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedNumber value={1000} style="currency" currency="USD" />\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Formatting Number using ",(0,i.kt)("inlineCode",{parentName:"strong"},"unit"))),(0,i.kt)("p",null,"Currently this is part of ES2020 ",(0,i.kt)("a",{parentName:"p",href:"https://tc39.es/ecma402/#numberformat-objects"},"NumberFormat"),".\nWe've provided a polyfill ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-numberformat"},"here")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"react-intl")," types allow users to pass\nin a ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-numberformat#SupportedUnits"},"sanctioned unit"),". For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedNumber\n  value={1000}\n  style="unit"\n  unit="kilobyte"\n  unitDisplay="narrow"\n/>\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedNumber\n  value={1000}\n  unit="fahrenheit"\n  unitDisplay="long"\n  style="unit"\n/>\n')),(0,i.kt)("h2",{id:"formattednumberparts"},"FormattedNumberParts"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"browser support")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This requires ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/formatToParts"},"Intl.NumberFormat.prototype.formatToParts")," which is not available in IE11. Please use our ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-numberformat"},"polyfill")," if you plan to support IE11."))),(0,i.kt)("p",null,"This component provides more customization to ",(0,i.kt)("inlineCode",{parentName:"p"},"FormattedNumber")," by allowing children function to have access to underlying parts of the formatted number. The available parts are listed ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat/formatToParts"},"here"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"props: NumberFormatOptions &\n  {\n    value: number,\n    format: string,\n    children: (parts: Intl.NumberFormatPart[]) => ReactElement,\n  }\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<FormattedNumberParts value={1000}>\n  {parts => (\n    <>\n      <b>{parts[0].value}</b>\n      {parts[1].value}\n      <small>{parts[2].value}</small>\n    </>\n  )}\n</FormattedNumberParts>\n")),(0,i.kt)("h2",{id:"formattedplural"},"FormattedPlural"),(0,i.kt)("p",null,"This component uses the ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api#formatplural"},(0,i.kt)("inlineCode",{parentName:"a"},"formatPlural"))," API and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/PluralRules"},(0,i.kt)("inlineCode",{parentName:"a"},"Intl.PluralRules"))," has ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," that correspond to ",(0,i.kt)("inlineCode",{parentName:"p"},"Intl.PluralRulesOptions"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"props: PluralFormatOptions &\n  {\n    value: any,\n\n    other: ReactElement,\n    zero: ReactElement,\n    one: ReactElement,\n    two: ReactElement,\n    few: ReactElement,\n    many: ReactElement,\n\n    children: (formattedPlural: ReactElement) => ReactElement,\n  }\n")),(0,i.kt)("p",null,"By default ",(0,i.kt)("inlineCode",{parentName:"p"},"<FormattedPlural>")," will select a ",(0,i.kt)("a",{parentName:"p",href:"http://www.unicode.org/cldr/charts/latest/supplemental/language_plural_rules.html"},"plural category")," (",(0,i.kt)("inlineCode",{parentName:"p"},"zero"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"one"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"two"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"few"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"many"),", or ",(0,i.kt)("inlineCode",{parentName:"p"},"other"),") and render the corresponding React element into a ",(0,i.kt)("inlineCode",{parentName:"p"},"React.Fragment"),". If you need to customize rendering, you can either wrap it with another React element (recommended), or pass a function as the child."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedPlural value={10} one="message" other="messages" />\n')),(0,i.kt)("h2",{id:"formattedlist"},"FormattedList"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"browser support")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This requires ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat"},"Intl.ListFormat")," which has limited browser support. Please use our ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-listformat"},"polyfill")," if you plan to support them."))),(0,i.kt)("p",null,"This component uses ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api#formatlist"},(0,i.kt)("inlineCode",{parentName:"a"},"formatList"))," API and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat"},"Intl.ListFormat"),". Its props corresponds to ",(0,i.kt)("inlineCode",{parentName:"p"},"Intl.ListFormatOptions"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"props: ListFormatOptions &\n  {\n    children: (chunksOrString: string | React.ReactElement[]) => ReactElement,\n  }\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("p",null,"When the locale is ",(0,i.kt)("inlineCode",{parentName:"p"},"en"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<FormattedList type=\"conjunction\" value={['Me', 'myself', 'I']} />\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<FormattedList type=\"conjunction\" value={['Me', <b>myself</b>, 'I']} />\n")),(0,i.kt)("h2",{id:"formattedlistparts"},"FormattedListParts"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"browser support")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This requires ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat"},"Intl.ListFormat")," which has limited browser support. Please use our ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-listformat"},"polyfill")," if you plan to support them."))),(0,i.kt)("p",null,"This component uses ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api#formatlisttoparts"},(0,i.kt)("inlineCode",{parentName:"a"},"formatListToParts"))," API and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ListFormat"},"Intl.ListFormat"),". Its props corresponds to ",(0,i.kt)("inlineCode",{parentName:"p"},"Intl.ListFormatOptions"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"props: ListFormatOptions &\n  {\n    children: (chunks: Array<React.ReactElement | string>) => ReactElement,\n  }\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("p",null,"When the locale is ",(0,i.kt)("inlineCode",{parentName:"p"},"en"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},"<FormattedListParts type=\"conjunction\" value={['Me', 'myself', 'I']}>\n  {parts => (\n    <>\n      <b>{parts[0].value}</b>\n      {parts[1].value}\n      <small>{parts[2].value}</small>\n      {parts[3].value}\n      <small>{parts[4].value}</small>\n    </>\n  )}\n</FormattedListParts>\n")),(0,i.kt)("h2",{id:"formatteddisplayname"},"FormattedDisplayName"),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"browser support")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"This requires ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames"},"Intl.DisplayNames")," which has limited browser support. Please use our ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-displaynames"},"polyfill")," if you plan to support them."))),(0,i.kt)("p",null,"This component uses ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api#formatdisplayname"},(0,i.kt)("inlineCode",{parentName:"a"},"formatDisplayName"))," and ",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames"},(0,i.kt)("inlineCode",{parentName:"a"},"Intl.DisplayNames")),"\nhas ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," that correspond to ",(0,i.kt)("inlineCode",{parentName:"p"},"DisplayNameOptions"),". You might need a ",(0,i.kt)("a",{parentName:"p",href:"/docs/polyfills/intl-displaynames"},"polyfill"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"props: FormatDisplayNameOptions &\n  {\n    value: string | number | Record<string, unknown>,\n  }\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("p",null,"When the locale is ",(0,i.kt)("inlineCode",{parentName:"p"},"en"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedDisplayName type="language" value="zh-Hans-SG" />\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedDisplayName type="currency" value="JPY" />\n')),(0,i.kt)("h2",{id:"formattedmessage"},"FormattedMessage"),(0,i.kt)("p",null,"This component uses the ",(0,i.kt)("a",{parentName:"p",href:"/docs/react-intl/api#formatmessage"},(0,i.kt)("inlineCode",{parentName:"a"},"formatMessage"))," API and has ",(0,i.kt)("inlineCode",{parentName:"p"},"props")," that correspond to a ",(0,i.kt)("a",{parentName:"p",href:"#message-descriptor"},"Message Descriptor"),"."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Props:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"props: MessageDescriptor &\n  {\n    values: object,\n    tagName: string,\n    children: (chunks: ReactElement) => ReactElement,\n  }\n")),(0,i.kt)("h3",{id:"message-syntax"},"Message Syntax"),(0,i.kt)("p",null,"String/Message formatting is a paramount feature of React Intl and it builds on ",(0,i.kt)("a",{parentName:"p",href:"https://unicode-org.github.io/icu/userguide/format_parse/messages"},"ICU Message Formatting")," by using the ",(0,i.kt)("a",{parentName:"p",href:"/docs/core-concepts/icu-syntax"},"ICU Message Syntax"),". This message syntax allows for simple to complex messages to be defined, translated, and then formatted at runtime."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Simple Message:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Hello, {name}\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Complex Message:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Hello, {name}, you have {itemCount, plural,\n    =0 {no items}\n    one {# item}\n    other {# items}\n}.\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"See:")," The ",(0,i.kt)("a",{parentName:"p",href:"/docs/core-concepts/icu-syntax"},"Message Syntax Guide"),"."),(0,i.kt)("h3",{id:"message-descriptor"},"Message Descriptor"),(0,i.kt)("p",null,"React Intl has a Message Descriptor concept which is used to define your app's default messages/strings. ",(0,i.kt)("inlineCode",{parentName:"p"},"<FormattedMessage>")," have props which correspond to a Message Descriptor. The Message Descriptors work very well for providing the data necessary for having the strings/messages translated, and they contain the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"id"),":")," A unique, stable identifier for the message"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"description"),":")," Context for the translator about how it's used in the UI"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"strong"},"defaultMessage"),":")," The default message (probably in English)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"type MessageDescriptor = {\n  id?: string\n  defaultMessage?: string\n  description?: string\n}\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"compile message descriptors")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The ",(0,i.kt)("a",{parentName:"p",href:"/docs/tooling/babel-plugin"},"babel-plugin-formatjs")," and ",(0,i.kt)("a",{parentName:"p",href:"/docs/tooling/ts-transformer"},"@formatjs/ts-transformer")," packages can be used to compile Message Descriptors defined in JavaScript source files into AST for performance."))),(0,i.kt)("h3",{id:"message-formatting-fallbacks"},"Message Formatting Fallbacks"),(0,i.kt)("p",null,"The message formatting APIs go the extra mile to provide fallbacks for the common situations where formatting fails; at the very least a non-empty string should always be returned. Here's the message formatting fallback algorithm:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Lookup and format the translated message at ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),", passed to ",(0,i.kt)("a",{parentName:"li",href:"#intlprovider"},(0,i.kt)("inlineCode",{parentName:"a"},"<IntlProvider>")),"."),(0,i.kt)("li",{parentName:"ol"},"Fallback to formatting the ",(0,i.kt)("inlineCode",{parentName:"li"},"defaultMessage"),"."),(0,i.kt)("li",{parentName:"ol"},"Fallback to translated message at ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),"'s source."),(0,i.kt)("li",{parentName:"ol"},"Fallback to ",(0,i.kt)("inlineCode",{parentName:"li"},"defaultMessage")," source."),(0,i.kt)("li",{parentName:"ol"},"Fallback to the literal message ",(0,i.kt)("inlineCode",{parentName:"li"},"id"),".")),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("p",null,"By default ",(0,i.kt)("inlineCode",{parentName:"p"},"<FormattedMessage>")," will render the formatted string into a ",(0,i.kt)("inlineCode",{parentName:"p"},"<React.Fragment>"),". If you need to customize rendering, you can either wrap it with another React element (recommended), specify a different ",(0,i.kt)("inlineCode",{parentName:"p"},"tagName")," (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"'div'"),"), or pass a function as the child."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedMessage\n  id="app.greeting"\n  description="Greeting to welcome the user to the app"\n  defaultMessage="Hello, {name}!"\n  values={{\n    name: \'Eric\',\n  }}\n/>\n')),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Example:")," function as the child"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedMessage id="title">{txt => <h1>{txt}</h1>}</FormattedMessage>\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"simple message")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Messages can be simple strings ",(0,i.kt)("em",{parentName:"p"},"without")," placeholders, and that's the most common type of message. This case is highly-optimized, but still has the benefits of the ",(0,i.kt)("a",{parentName:"p",href:"#message-formatting-fallbacks"},"fallback procedure"),"."))),(0,i.kt)("h3",{id:"rich-text-formatting"},"Rich Text Formatting"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<FormattedMessage>")," also supports rich-text formatting by specifying a XML tag in the message & resolving that tag in the ",(0,i.kt)("inlineCode",{parentName:"p"},"values")," prop. Here's an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedMessage\n  id="app.greeting"\n  description="Greeting to welcome the user to the app"\n  defaultMessage="Hello, <b>Eric</b> {icon}"\n  values={{\n    b: chunks => <b>{chunks}</b>,\n    icon: <svg />,\n  }}\n/>\n')),(0,i.kt)("p",null,"By allowing embedding XML tag we want to make sure contextual information is not lost when you need to style part of the string. In a more complicated example like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedMessage\n  id="foo"\n  defaultMessage="To buy a shoe, <a>visit our website</a> and <cta>buy a shoe</cta>"\n  values={{\n    a: chunks => (\n      <a\n        class="external_link"\n        target="_blank"\n        href="https://www.example.com/shoe"\n      >\n        {chunks}\n      </a>\n    ),\n    cta: chunks => <strong class="important">{chunks}</strong>,\n  }}\n/>\n')),(0,i.kt)("h3",{id:"function-as-the-child"},"Function as the child"),(0,i.kt)("p",null,"Since rich text formatting allows embedding ",(0,i.kt)("inlineCode",{parentName:"p"},"ReactElement"),", in function as the child scenario, the function will receive the formatted message chunks as a single parameter."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live",live:!0},'<FormattedMessage\n  id="foo"\n  defaultMessage="To buy a shoe, <a>visit our website</a> and <cta>buy a shoe</cta>"\n  values={{\n    a: chunks => (\n      <a\n        class="external_link"\n        target="_blank"\n        href="https://www.example.com/shoe"\n      >\n        {chunks}\n      </a>\n    ),\n    cta: chunks => <strong class="important">{chunks}</strong>,\n  }}\n>\n  {chunks => <h2>{chunks}</h2>}\n</FormattedMessage>\n')),(0,i.kt)("p",null,"All the rich text gets translated together which yields higher quality output. This brings feature-parity with other translation libs as well, such as ",(0,i.kt)("a",{parentName:"p",href:"https://projectfluent.org/"},"fluent")," by Mozilla (using ",(0,i.kt)("inlineCode",{parentName:"p"},"overlays")," concept)."),(0,i.kt)("p",null,"Extending this also allows users to potentially utilizing other rich text format, like ",(0,i.kt)("a",{parentName:"p",href:"https://daringfireball.net/projects/markdown/"},"Markdown"),"."))}d.isMDXComponent=!0}}]);