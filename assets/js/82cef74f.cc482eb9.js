(self.webpackChunk=self.webpackChunk||[]).push([[7390],{3905:(e,n,t)=>{"use strict";t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var i=a.createContext({}),d=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,s=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=d(t),m=l,f=u["".concat(i,".").concat(m)]||u[m]||c[m]||s;return t?a.createElement(f,r(r({ref:n},p),{},{components:t})):a.createElement(f,r({ref:n},p))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var s=t.length,r=new Array(s);r[0]=u;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var d=2;d<s;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8215:(e,n,t)=>{"use strict";t.d(n,{Z:()=>l});var a=t(7294);const l=function(e){var n=e.children,t=e.hidden,l=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:l},n)}},5064:(e,n,t)=>{"use strict";t.d(n,{Z:()=>d});var a=t(7294),l=t(9443);const s=function(){var e=(0,a.useContext)(l.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e};var r=t(6010);const o="tabItem_1uMI",i="tabItemActive_2DSg";const d=function(e){var n,t=e.lazy,l=e.block,d=e.defaultValue,p=e.values,c=e.groupId,u=e.className,m=a.Children.toArray(e.children),f=null!=p?p:m.map((function(e){return{value:e.props.value,label:e.props.label}})),g=null!=d?d:null==(n=m.find((function(e){return e.props.default})))?void 0:n.props.value,h=s(),k=h.tabGroupChoices,v=h.setTabGroupChoices,b=(0,a.useState)(g),N=b[0],y=b[1],M=[];if(null!=c){var w=k[c];null!=w&&w!==N&&f.some((function(e){return e.value===w}))&&y(w)}var C=function(e){var n=e.currentTarget,t=M.indexOf(n),a=f[t].value;y(a),null!=c&&(v(c,a),setTimeout((function(){var e,t,a,l,s,r,o,d;(e=n.getBoundingClientRect(),t=e.top,a=e.left,l=e.bottom,s=e.right,r=window,o=r.innerHeight,d=r.innerWidth,t>=0&&s<=d&&l<=o&&a>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(i),setTimeout((function(){return n.classList.remove(i)}),2e3))}),150))},j=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=M.indexOf(e.target)+1;t=M[a]||M[0];break;case"ArrowLeft":var l=M.indexOf(e.target)-1;t=M[l]||M[M.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":l},u)},f.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,className:(0,r.Z)("tabs__item",o,{"tabs__item--active":N===n}),key:n,ref:function(e){return M.push(e)},onKeyDown:j,onFocus:C,onClick:C},null!=t?t:n)}))),t?(0,a.cloneElement)(m.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},m.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==N})}))))}},9443:(e,n,t)=>{"use strict";t.d(n,{Z:()=>a});const a=(0,t(7294).createContext)(void 0)},1025:(e,n,t)=>{"use strict";t.r(n),t.d(n,{frontMatter:()=>d,contentTitle:()=>p,metadata:()=>c,toc:()=>u,default:()=>f});var a=t(2122),l=t(9756),s=(t(7294),t(3905)),r=t(5064),o=t(8215),i=["components"],d={id:"linter",title:"eslint-plugin-formatjs"},p=void 0,c={unversionedId:"tooling/linter",id:"tooling/linter",isDocsHomePage:!1,title:"eslint-plugin-formatjs",description:"This eslint plugin allows you to enforce certain rules in your ICU message.",source:"@site/docs/tooling/linter.md",sourceDirName:"tooling",slug:"/tooling/linter",permalink:"/docs/tooling/linter",editUrl:"https://github.com/formatjs/formatjs/edit/main/website/docs/tooling/linter.md",tags:[],version:"current",frontMatter:{id:"linter",title:"eslint-plugin-formatjs"},sidebar:"tooling",previous:{title:"CLI",permalink:"/docs/tooling/cli"},next:{title:"babel-plugin-formatjs",permalink:"/docs/tooling/babel-plugin"}},u=[{value:"Usage",id:"usage",children:[{value:"React",id:"react",children:[]},{value:"Vue",id:"vue",children:[]}]},{value:"Shared Settings",id:"shared-settings",children:[{value:"<code>additionalFunctionNames</code>",id:"additionalfunctionnames",children:[]},{value:"<code>additionalComponentNames</code>",id:"additionalcomponentnames",children:[]}]},{value:"Available Rules",id:"available-rules",children:[{value:"<code>blacklist-elements</code>",id:"blacklist-elements",children:[]},{value:"<code>enforce-description</code>",id:"enforce-description",children:[]},{value:"<code>enforce-default-message</code>",id:"enforce-default-message",children:[]},{value:"<code>enforce-placeholders</code>",id:"enforce-placeholders",children:[]},{value:"<code>enforce-plural-rules</code>",id:"enforce-plural-rules",children:[]},{value:"<code>no-camel-case</code>",id:"no-camel-case",children:[]},{value:"<code>no-emoji</code>",id:"no-emoji",children:[]},{value:"<code>no-multiple-whitespaces</code>",id:"no-multiple-whitespaces",children:[]},{value:"<code>no-multiple-plurals</code>",id:"no-multiple-plurals",children:[]},{value:"<code>no-offset</code>",id:"no-offset",children:[]},{value:"<code>enforce-id</code>",id:"enforce-id",children:[]},{value:"<code>no-id</code>",id:"no-id",children:[]},{value:"<code>no-complex-selectors</code>",id:"no-complex-selectors",children:[]}]}],m={toc:u};function f(e){var n=e.components,t=(0,l.Z)(e,i);return(0,s.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"This eslint plugin allows you to enforce certain rules in your ICU message."),(0,s.kt)("h2",{id:"usage"},"Usage"),(0,s.kt)(r.Z,{groupId:"npm",defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"yarn",value:"yarn"}],mdxType:"Tabs"},(0,s.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"npm i -D eslint-plugin-formatjs\n"))),(0,s.kt)(o.Z,{value:"yarn",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"yarn add -D eslint-plugin-formatjs\n")))),(0,s.kt)("p",null,"Then in your eslint config:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/no-offset": "error"\n  }\n}\n')),(0,s.kt)("h3",{id:"react"},"React"),(0,s.kt)("p",null,"Currently this uses ",(0,s.kt)("inlineCode",{parentName:"p"},"intl.formatMessage"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"defineMessage"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"defineMessages"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"<FormattedMessage>")," from ",(0,s.kt)("inlineCode",{parentName:"p"},"react-intl")," as hooks to verify the message. Therefore, in your code use 1 of the following mechanisms:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import {defineMessages, defineMessage} from 'react-intl'\n\nconst messages = defineMessages({\n  foo: {\n    defaultMessage: 'foo',\n    description: 'bar',\n  },\n})\n\ndefineMessage({\n  defaultMessage: 'single message',\n})\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},'import {FormattedMessage} from \'react-intl\'\n;<FormattedMessage defaultMessage="foo" description="bar" />\n')),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"function foo() {\n  intl.formatMessage({\n    defaultMessage: 'foo',\n  })\n}\n")),(0,s.kt)("h3",{id:"vue"},"Vue"),(0,s.kt)("p",null,"This will check against ",(0,s.kt)("inlineCode",{parentName:"p"},"intl.formatMessage"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"$formatMessage")," function calls in both your JS/TS & your SFC ",(0,s.kt)("inlineCode",{parentName:"p"},".vue")," files. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-vue"},"<template>\n  <p>\n    {{\n      $formatMessage({\n        defaultMessage: 'today is {now, date}',\n      })\n    }}\n  </p>\n</template>\n")),(0,s.kt)("h2",{id:"shared-settings"},"Shared Settings"),(0,s.kt)("p",null,"These settings are applied globally to all formatjs rules once specified. See ",(0,s.kt)("a",{parentName:"p",href:"https://eslint.org/docs/user-guide/configuring/configuration-files#adding-shared-settings"},"Shared Settings")," for more details on how to set them."),(0,s.kt)("h3",{id:"additionalfunctionnames"},(0,s.kt)("inlineCode",{parentName:"h3"},"additionalFunctionNames")),(0,s.kt)("p",null,"Similar to ",(0,s.kt)("a",{parentName:"p",href:"/docs/tooling/babel-plugin#additionalfunctionnames"},"babel-plugin-formatjs")," & ",(0,s.kt)("a",{parentName:"p",href:"/docs/tooling/ts-transformer#additionalfunctionnames"},"@formatjs/ts-transformer"),", this allows you to specify additional function names to check besides ",(0,s.kt)("inlineCode",{parentName:"p"},"formatMessage")," & ",(0,s.kt)("inlineCode",{parentName:"p"},"$formatMessage"),"."),(0,s.kt)("h3",{id:"additionalcomponentnames"},(0,s.kt)("inlineCode",{parentName:"h3"},"additionalComponentNames")),(0,s.kt)("p",null,"Similar to ",(0,s.kt)("a",{parentName:"p",href:"/docs/tooling/babel-plugin#additionalcomponentnames"},"babel-plugin-formatjs")," & ",(0,s.kt)("a",{parentName:"p",href:"/docs/tooling/ts-transformer#additionalcomponentnames"},"@formatjs/ts-transformer"),", this allows you to specify additional component names to check besides ",(0,s.kt)("inlineCode",{parentName:"p"},"FormattedMessage"),"."),(0,s.kt)("h2",{id:"available-rules"},"Available Rules"),(0,s.kt)("h3",{id:"blacklist-elements"},(0,s.kt)("inlineCode",{parentName:"h3"},"blacklist-elements")),(0,s.kt)("p",null,"This blacklists usage of specific elements in ICU message."),(0,s.kt)("h4",{id:"why"},"Why"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Certain translation vendors cannot handle things like ",(0,s.kt)("inlineCode",{parentName:"li"},"selectordinal"))),(0,s.kt)("h4",{id:"available-elements"},"Available elements"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"enum Element {\n  // literal text, like `defaultMessage: 'some text'`\n  literal = 'literal',\n  // placeholder, like `defaultMessage: '{placeholder} var'`\n  argument = 'argument',\n  // number, like `defaultMessage: '{placeholder, number} var'`\n  number = 'number',\n  // date, like `defaultMessage: '{placeholder, date} var'`\n  date = 'date',\n  // time, like `defaultMessage: '{placeholder, time} var'`\n  time = 'time',\n  // select, like `defaultMessage: '{var, select, foo{one} bar{two}} var'`\n  select = 'select',\n  // selectordinal, like `defaultMessage: '{var, selectordinal, one{one} other{two}} var'`\n  selectordinal = 'selectordinal',\n  // plural, like `defaultMessage: '{var, plural, one{one} other{two}} var'`\n  plural = 'plural',\n}\n")),(0,s.kt)("h4",{id:"example"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/blacklist-elements": [2, ["selectordinal"]]\n  }\n}\n')),(0,s.kt)("h3",{id:"enforce-description"},(0,s.kt)("inlineCode",{parentName:"h3"},"enforce-description")),(0,s.kt)("p",null,"This enforces ",(0,s.kt)("inlineCode",{parentName:"p"},"description")," in the message descriptor."),(0,s.kt)("h4",{id:"why-1"},"Why"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Description provides helpful context for translators")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // WORKS\n  foo: {\n    defaultMessage: 'foo',\n    description: 'bar',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: 'bar',\n  },\n})\n")),(0,s.kt)("h4",{id:"options"},"Options"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/enforce-description": ["error", "literal"]\n  }\n}\n')),(0,s.kt)("p",null,"Setting ",(0,s.kt)("inlineCode",{parentName:"p"},"literal")," forces ",(0,s.kt)("inlineCode",{parentName:"p"},"description")," to always be a string literal instead of function calls or variables. This is helpful for extraction tools that expects ",(0,s.kt)("inlineCode",{parentName:"p"},"description")," to always be a literal"),(0,s.kt)("h3",{id:"enforce-default-message"},(0,s.kt)("inlineCode",{parentName:"h3"},"enforce-default-message")),(0,s.kt)("p",null,"This enforces ",(0,s.kt)("inlineCode",{parentName:"p"},"defaultMessage")," in the message descriptor."),(0,s.kt)("h4",{id:"why-2"},"Why"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Can be useful in case we want to extract messages for translations from source code. This way can make sure people won't forget about defaultMessage")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // WORKS\n  foo: {\n    defaultMessage: 'This is default message',\n    description: 'bar',\n  },\n  // FAILS\n  bar: {\n    description: 'bar',\n  },\n})\n")),(0,s.kt)("h4",{id:"options-1"},"Options"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/enforce-default-message": ["error", "literal"]\n  }\n}\n')),(0,s.kt)("p",null,"Setting ",(0,s.kt)("inlineCode",{parentName:"p"},"literal")," forces ",(0,s.kt)("inlineCode",{parentName:"p"},"defaultMessage")," to always be a string literal instead of function calls or variables. This is helpful for extraction tools that expects ",(0,s.kt)("inlineCode",{parentName:"p"},"defaultMessage")," to always be a literal"),(0,s.kt)("h3",{id:"enforce-placeholders"},(0,s.kt)("inlineCode",{parentName:"h3"},"enforce-placeholders")),(0,s.kt)("p",null,"Makes sure all values are passed in if message has placeholders (number/date/time/plural/select/selectordinal). This requires values to be passed in as literal object (not a variable)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"// WORKS, no error\n<FormattedMessage\n  defaultMessage=\"this is a {placeholder}\"\n  values={{placeholder: 'dog'}}\n/>\n\n// WORKS, no error\nintl.formatMessage({\n  defaultMessage: 'this is a {placeholder}'\n}, {placeholder: 'dog'})\n\n// WORKS, error bc no values were provided\n<FormattedMessage\n  defaultMessage=\"this is a {placeholder}\"\n/>\n\n// WORKS, error bc no values were provided\nintl.formatMessage({\n  defaultMessage: 'this is a {placeholder}'\n})\n\n// WORKS, error bc `placeholder` is not passed in\n<FormattedMessage\n  defaultMessage=\"this is a {placeholder}\"\n  values={{foo: 1}}\n/>\n\n// WORKS, error bc `placeholder` is not passed in\nintl.formatMessage({\n  defaultMessage: 'this is a {placeholder}'\n}, {foo: 1})\n\n// DOESN'T WORK\n<FormattedMessage\n  defaultMessage=\"this is a {placeholder}\"\n  values={someVar}\n/>\n\n// DOESN'T WORK\nintl.formatMessage({\n  defaultMessage: 'this is a {placeholder}'\n}, values)\n")),(0,s.kt)("h4",{id:"options-2"},"Options"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/enforce-placeholders": [\n      "error",\n      {\n        "ignoreList": ["foo"]\n      }\n    ]\n  }\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ignoreList"),": List of placeholder names to ignore. This works with ",(0,s.kt)("inlineCode",{parentName:"li"},"defaultRichTextElements")," in ",(0,s.kt)("inlineCode",{parentName:"li"},"react-intl")," so we don't provide false positive for ambient global tag formatting")),(0,s.kt)("h3",{id:"enforce-plural-rules"},(0,s.kt)("inlineCode",{parentName:"h3"},"enforce-plural-rules")),(0,s.kt)("p",null,"Enforce certain plural rules to always be specified/forbidden in a message."),(0,s.kt)("h4",{id:"why-3"},"Why"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"It is recommended to always specify ",(0,s.kt)("inlineCode",{parentName:"li"},"other")," as fallback in the message."),(0,s.kt)("li",{parentName:"ul"},"Some translation vendors only accept certain rules.")),(0,s.kt)("h4",{id:"available-rules-1"},"Available rules"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"enum LDML {\n  zero = 'zero',\n  one = 'one',\n  two = 'two',\n  few = 'few',\n  many = 'many',\n  other = 'other',\n}\n")),(0,s.kt)("h4",{id:"example-1"},"Example"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/enforce-plural-rules": [\n      2,\n      {\n        "one": true,\n        "other": true,\n        "zero": false\n      }\n    ]\n  }\n}\n')),(0,s.kt)("h3",{id:"no-camel-case"},(0,s.kt)("inlineCode",{parentName:"h3"},"no-camel-case")),(0,s.kt)("p",null,"This make sure placeholders are not camel-case."),(0,s.kt)("h4",{id:"why-4"},"Why"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"This is to prevent case-sensitivity issue in certain translation vendors.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // WORKS\n  foo: {\n    defaultMessage: 'foo {snake_case} {nothing}',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: 'foo {camelCase}',\n  },\n})\n")),(0,s.kt)("h3",{id:"no-emoji"},(0,s.kt)("inlineCode",{parentName:"h3"},"no-emoji")),(0,s.kt)("p",null,"This prevents usage of emoji in message."),(0,s.kt)("h4",{id:"why-5"},"Why"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Certain translation vendors cannot handle emojis."),(0,s.kt)("li",{parentName:"ul"},"Cross-platform encoding for emojis are faulty.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // WORKS\n  foo: {\n    defaultMessage: 'Smileys & People',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: '\ud83d\ude03 Smileys & People',\n  },\n})\n")),(0,s.kt)("h3",{id:"no-multiple-whitespaces"},(0,s.kt)("inlineCode",{parentName:"h3"},"no-multiple-whitespaces")),(0,s.kt)("p",null,"This prevents usage of multiple consecutive whitespaces in message."),(0,s.kt)("h4",{id:"why-6"},"Why"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Consecutive whitespaces are handled differently in different locales."),(0,s.kt)("li",{parentName:"ul"},"Prevents ",(0,s.kt)("inlineCode",{parentName:"li"},"\\")," linebreaks in JS string which results in awkward whitespaces.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // WORKS\n  foo: {\n    defaultMessage: 'Smileys & People',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: 'Smileys &   People',\n  },\n  // FAILS\n  baz: {\n    defaultMessage:\n      'this message is too long \\\n    so I wanna line break it.',\n  },\n})\n")),(0,s.kt)("h3",{id:"no-multiple-plurals"},(0,s.kt)("inlineCode",{parentName:"h3"},"no-multiple-plurals")),(0,s.kt)("p",null,"This prevents specifying multiple plurals in your message."),(0,s.kt)("h4",{id:"why-7"},"Why"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Nested plurals are hard to translate across languages so some translation vendors don't allow it.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n    // WORKS\n    foo: {\n        defaultMessage: '{p1, plural, one{one}}',\n    },\n    // FAILS\n    bar: {\n        defaultMessage: '{p1, plural, one{one}} {p2, plural, one{two}}',\n    }\n    // ALSO FAILS\n    bar2: {\n        defaultMessage: '{p1, plural, one{{p2, plural, one{two}}}}',\n    }\n})\n")),(0,s.kt)("h3",{id:"no-offset"},(0,s.kt)("inlineCode",{parentName:"h3"},"no-offset")),(0,s.kt)("p",null,"This prevents specifying offset in plural rules in your message."),(0,s.kt)("h4",{id:"why-8"},"Why"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Offset has complicated logic implication so some translation vendors don't allow it.")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // PASS\n  foo: {\n    defaultMessage: '{var, plural, one{one} other{other}}',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: '{var, plural, offset:1 one{one} other{other}}',\n  },\n})\n")),(0,s.kt)("h3",{id:"enforce-id"},(0,s.kt)("inlineCode",{parentName:"h3"},"enforce-id")),(0,s.kt)("p",null,"This enforces generated ID to be set in ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageDescriptor"),"."),(0,s.kt)("h4",{id:"why-9"},"Why"),(0,s.kt)("p",null,"Pipelines can enforce automatic/manual ID generation at the linter level (autofix to insert autogen ID) so this guarantees that."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import {defineMessages} from 'react-intl';\n\nconst messages = defineMessages({\n  // PASS\n  foo: {\n    id: '19shaf'\n    defaultMessage: '{var, plural, one{one} other{other}}',\n  },\n  // FAILS\n  bar: {\n    id: 'something',\n    defaultMessage: '{var, plural, offset:1 one{one} other{other}}',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: '{var, plural, offset:1 one{one} other{other}}',\n  },\n});\n")),(0,s.kt)("h4",{id:"options-3"},"Options"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/enforce-id": [\n      "error",\n      {\n        "idInterpolationPattern": "[sha512:contenthash:base64:6]"\n      }\n    ]\n  }\n}\n')),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"idInterpolationPattern"),": Pattern to verify ID against")),(0,s.kt)("h3",{id:"no-id"},(0,s.kt)("inlineCode",{parentName:"h3"},"no-id")),(0,s.kt)("p",null,"This bans explicit ID in ",(0,s.kt)("inlineCode",{parentName:"p"},"MessageDescriptor"),"."),(0,s.kt)("h4",{id:"why-10"},"Why"),(0,s.kt)("p",null,"We generally encourage automatic ID generation due to ",(0,s.kt)("a",{parentName:"p",href:"https://formatjs.io/docs/getting-started/message-declaration"},"these reasons"),". This makes sure no explicit IDs are set."),(0,s.kt)("h3",{id:"no-complex-selectors"},(0,s.kt)("inlineCode",{parentName:"h3"},"no-complex-selectors")),(0,s.kt)("p",null,"Make sure a sentence is not too complex.\nComplexity is determined by how many strings are produced when we try to flatten the sentence given its selectors. For example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"I have {count, plural, one{a dog} other{many dogs}}\n")),(0,s.kt)("p",null,"has the complexity of 2 because flattening the plural selector results in 2 sentences: ",(0,s.kt)("inlineCode",{parentName:"p"},"I have a dog")," & ",(0,s.kt)("inlineCode",{parentName:"p"},"I have many dogs"),".\nDefault complexity limit is 20 (using ",(0,s.kt)("a",{parentName:"p",href:"https://help.smartling.com/hc/en-us/articles/360008030994-ICU-MessageFormat"},"Smartling as a reference"),")"),(0,s.kt)("h4",{id:"options-4"},"Options"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/no-complex-selectors": [\n      "error",\n      {\n        "limit": 3\n      }\n    ]\n  }\n}\n')))}f.isMDXComponent=!0},6010:(e,n,t)=>{"use strict";function a(e){var n,t,l="";if("string"==typeof e||"number"==typeof e)l+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(l&&(l+=" "),l+=t);else for(n in e)e[n]&&(l&&(l+=" "),l+=n);return l}function l(){for(var e,n,t=0,l="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(l&&(l+=" "),l+=n);return l}t.d(n,{Z:()=>l})}}]);