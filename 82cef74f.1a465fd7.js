(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{108:function(e,n,t){"use strict";t.d(n,"a",(function(){return b})),t.d(n,"b",(function(){return f}));var a=t(0),l=t.n(a);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=l.a.createContext({}),u=function(e){var n=l.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},b=function(e){var n=u(e.components);return l.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return l.a.createElement(l.a.Fragment,{},n)}},d=l.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),b=u(t),d=a,f=b["".concat(s,".").concat(d)]||b[d]||p[d]||r;return t?l.a.createElement(f,o(o({ref:n},c),{},{components:t})):l.a.createElement(f,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,s=new Array(r);s[0]=d;var o={};for(var i in n)hasOwnProperty.call(n,i)&&(o[i]=n[i]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<r;c++)s[c]=t[c];return l.a.createElement.apply(null,s)}return l.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},109:function(e,n,t){"use strict";function a(e){var n,t,l="";if("string"==typeof e||"number"==typeof e)l+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(l&&(l+=" "),l+=t);else for(n in e)e[n]&&(l&&(l+=" "),l+=n);return l}n.a=function(){for(var e,n,t=0,l="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(l&&(l+=" "),l+=n);return l}},110:function(e,n,t){"use strict";var a=t(0),l=Object(a.createContext)(void 0);n.a=l},111:function(e,n,t){"use strict";var a=t(0),l=t(110);n.a=function(){var e=Object(a.useContext)(l.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},112:function(e,n,t){"use strict";var a=t(0),l=t.n(a),r=t(111),s=t(109),o=t(48),i=t.n(o),c=37,u=39;n.a=function(e){var n=e.block,t=e.children,o=e.defaultValue,b=e.values,p=e.groupId,d=Object(r.a)(),f=d.tabGroupChoices,m=d.setTabGroupChoices,g=Object(a.useState)(o),O=g[0],j=g[1],h=Object(a.useState)(!1),v=h[0],y=h[1];if(null!=p){var N=f[p];null!=N&&N!==O&&b.some((function(e){return e.value===N}))&&j(N)}var M=function(e){j(e),null!=p&&m(p,e)},w=[],C=function(e){e.metaKey||e.altKey||e.ctrlKey||y(!0)},x=function(){y(!1)};return Object(a.useEffect)((function(){window.addEventListener("keydown",C),window.addEventListener("mousedown",x)}),[]),l.a.createElement("div",null,l.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":n})},b.map((function(e){var n=e.value,t=e.label;return l.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":O===n,className:Object(s.a)("tabs__item",i.a.tabItem,{"tabs__item--active":O===n}),style:v?{}:{outline:"none"},key:n,ref:function(e){return w.push(e)},onKeyDown:function(e){!function(e,n,t){switch(t.keyCode){case u:!function(e,n){var t=e.indexOf(n)+1;e[t]?e[t].focus():e[0].focus()}(e,n);break;case c:!function(e,n){var t=e.indexOf(n)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,n)}}(w,e.target,e),C(e)},onFocus:function(){return M(n)},onClick:function(){M(n),y(!1)},onPointerDown:function(){return y(!1)}},t)}))),l.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(t).filter((function(e){return e.props.value===O}))[0]))}},113:function(e,n,t){"use strict";var a=t(0),l=t.n(a);n.a=function(e){return l.a.createElement("div",null,e.children)}},82:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return c})),t.d(n,"rightToc",(function(){return u})),t.d(n,"default",(function(){return p}));var a=t(2),l=t(6),r=(t(0),t(108)),s=t(112),o=t(113),i={id:"linter",title:"eslint-plugin-formatjs"},c={unversionedId:"tooling/linter",id:"tooling/linter",isDocsHomePage:!1,title:"eslint-plugin-formatjs",description:"This eslint plugin allows you to enforce certain rules in your ICU message. This is currently under development",source:"@site/docs/tooling/linter.md",slug:"/tooling/linter",permalink:"/docs/tooling/linter",editUrl:"https://github.com/formatjs/formatjs/edit/main/website/docs/tooling/linter.md",version:"current",sidebar:"tooling",previous:{title:"CLI",permalink:"/docs/tooling/cli"},next:{title:"babel-plugin-react-intl",permalink:"/docs/tooling/babel-plugin"}},u=[{value:"Usage",id:"usage",children:[]},{value:"Available Rules",id:"available-rules",children:[{value:"<code>blacklist-elements</code>",id:"blacklist-elements",children:[]},{value:"<code>enforce-description</code>",id:"enforce-description",children:[]},{value:"<code>enforce-default-message</code>",id:"enforce-default-message",children:[]},{value:"<code>enforce-placeholders</code>",id:"enforce-placeholders",children:[]},{value:"<code>enforce-plural-rules</code>",id:"enforce-plural-rules",children:[]},{value:"<code>no-camel-case</code>",id:"no-camel-case",children:[]},{value:"<code>no-emoji</code>",id:"no-emoji",children:[]},{value:"<code>no-multiple-whitespaces</code>",id:"no-multiple-whitespaces",children:[]},{value:"<code>no-multiple-plurals</code>",id:"no-multiple-plurals",children:[]},{value:"<code>no-offset</code>",id:"no-offset",children:[]},{value:"<code>enforce-id</code>",id:"enforce-id",children:[]}]}],b={rightToc:u};function p(e){var n=e.components,t=Object(l.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},b,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This eslint plugin allows you to enforce certain rules in your ICU message. This is currently under development"),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)(s.a,{groupId:"npm",defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"yarn",value:"yarn"}],mdxType:"Tabs"},Object(r.b)(o.a,{value:"npm",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"npm i -D eslint-plugin-formatjs\n"))),Object(r.b)(o.a,{value:"yarn",mdxType:"TabItem"},Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-sh"}),"yarn add -D eslint-plugin-formatjs\n")))),Object(r.b)("p",null,"Then in your eslint config:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/no-offset": "error"\n  }\n}\n')),Object(r.b)("p",null,"Currently this uses ",Object(r.b)("inlineCode",{parentName:"p"},"intl.formatMessage"),", ",Object(r.b)("inlineCode",{parentName:"p"},"defineMessage"),", ",Object(r.b)("inlineCode",{parentName:"p"},"defineMessages"),", ",Object(r.b)("inlineCode",{parentName:"p"},"<FormattedMessage>")," from ",Object(r.b)("inlineCode",{parentName:"p"},"react-intl")," as hooks to verify the message. Therefore, in your code use 1 of the following mechanisms:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {defineMessages, defineMessage} from 'react-intl'\n\nconst messages = defineMessages({\n  foo: {\n    defaultMessage: 'foo',\n    description: 'bar',\n  },\n})\n\ndefineMessage({\n  defaultMessage: 'single message',\n})\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),'import {FormattedMessage} from \'react-intl\'\n;<FormattedMessage defaultMessage="foo" description="bar" />\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"function foo() {\n  intl.formatMessage({\n    defaultMessage: 'foo',\n  })\n}\n")),Object(r.b)("h2",{id:"available-rules"},"Available Rules"),Object(r.b)("h3",{id:"blacklist-elements"},Object(r.b)("inlineCode",{parentName:"h3"},"blacklist-elements")),Object(r.b)("p",null,"This blacklists usage of specific elements in ICU message."),Object(r.b)("h4",{id:"why"},"Why"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Certain translation vendors cannot handle things like ",Object(r.b)("inlineCode",{parentName:"li"},"selectordinal"))),Object(r.b)("h4",{id:"available-elements"},"Available elements"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"enum Element {\n  // literal text, like `defaultMessage: 'some text'`\n  literal = 'literal',\n  // placeholder, like `defaultMessage: '{placeholder} var'`\n  argument = 'argument',\n  // number, like `defaultMessage: '{placeholder, number} var'`\n  number = 'number',\n  // date, like `defaultMessage: '{placeholder, date} var'`\n  date = 'date',\n  // time, like `defaultMessage: '{placeholder, time} var'`\n  time = 'time',\n  // select, like `defaultMessage: '{var, select, foo{one} bar{two}} var'`\n  select = 'select',\n  // selectordinal, like `defaultMessage: '{var, selectordinal, one{one} other{two}} var'`\n  selectordinal = 'selectordinal',\n  // plural, like `defaultMessage: '{var, plural, one{one} other{two}} var'`\n  plural = 'plural',\n}\n")),Object(r.b)("h4",{id:"example"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/blacklist-elements": [2, ["selectordinal"]]\n  }\n}\n')),Object(r.b)("h3",{id:"enforce-description"},Object(r.b)("inlineCode",{parentName:"h3"},"enforce-description")),Object(r.b)("p",null,"This enforces ",Object(r.b)("inlineCode",{parentName:"p"},"description")," in the message descriptor."),Object(r.b)("h4",{id:"why-1"},"Why"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Description provides helpful context for translators")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // WORKS\n  foo: {\n    defaultMessage: 'foo',\n    description: 'bar',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: 'bar',\n  },\n})\n")),Object(r.b)("h4",{id:"options"},"Options"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/enforce-description": ["error", "literal"]\n  }\n}\n')),Object(r.b)("p",null,"Setting ",Object(r.b)("inlineCode",{parentName:"p"},"literal")," forces ",Object(r.b)("inlineCode",{parentName:"p"},"description")," to always be a string literal instead of function calls or variables. This is helpful for extraction tools that expects ",Object(r.b)("inlineCode",{parentName:"p"},"description")," to always be a literal"),Object(r.b)("h3",{id:"enforce-default-message"},Object(r.b)("inlineCode",{parentName:"h3"},"enforce-default-message")),Object(r.b)("p",null,"This enforces ",Object(r.b)("inlineCode",{parentName:"p"},"defaultMessage")," in the message descriptor."),Object(r.b)("h4",{id:"why-2"},"Why"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Can be useful in case we want to extract messages for translations from source code. This way can make sure people won't forget about defaultMessage")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // WORKS\n  foo: {\n    defaultMessage: 'This is default message',\n    description: 'bar',\n  },\n  // FAILS\n  bar: {\n    description: 'bar',\n  },\n})\n")),Object(r.b)("h4",{id:"options-1"},"Options"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/enforce-default-message": ["error", "literal"]\n  }\n}\n')),Object(r.b)("p",null,"Setting ",Object(r.b)("inlineCode",{parentName:"p"},"literal")," forces ",Object(r.b)("inlineCode",{parentName:"p"},"defaultMessage")," to always be a string literal instead of function calls or variables. This is helpful for extraction tools that expects ",Object(r.b)("inlineCode",{parentName:"p"},"defaultMessage")," to always be a literal"),Object(r.b)("h3",{id:"enforce-placeholders"},Object(r.b)("inlineCode",{parentName:"h3"},"enforce-placeholders")),Object(r.b)("p",null,"Makes sure all values are passed in if message has placeholders (number/date/time/plural/select/selectordinal). This requires values to be passed in as literal object (not a variable)."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"// WORKS, no error\n<FormattedMessage\n  defaultMessage=\"this is a {placeholder}\"\n  values={{placeholder: 'dog'}}\n/>\n\n// WORKS, no error\nintl.formatMessage({\n  defaultMessage: 'this is a {placeholder}'\n}, {placeholder: 'dog'})\n\n// WORKS, error bc no values were provided\n<FormattedMessage\n  defaultMessage=\"this is a {placeholder}\"\n/>\n\n// WORKS, error bc no values were provided\nintl.formatMessage({\n  defaultMessage: 'this is a {placeholder}'\n})\n\n// WORKS, error bc `placeholder` is not passed in\n<FormattedMessage\n  defaultMessage=\"this is a {placeholder}\"\n  values={{foo: 1}}\n/>\n\n// WORKS, error bc `placeholder` is not passed in\nintl.formatMessage({\n  defaultMessage: 'this is a {placeholder}'\n}, {foo: 1})\n\n// DOESN'T WORK\n<FormattedMessage\n  defaultMessage=\"this is a {placeholder}\"\n  values={someVar}\n/>\n\n// DOESN'T WORK\nintl.formatMessage({\n  defaultMessage: 'this is a {placeholder}'\n}, values)\n")),Object(r.b)("h3",{id:"enforce-plural-rules"},Object(r.b)("inlineCode",{parentName:"h3"},"enforce-plural-rules")),Object(r.b)("p",null,"Enforce certain plural rules to always be specified/forbidden in a message."),Object(r.b)("h4",{id:"why-3"},"Why"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"It is recommended to always specify ",Object(r.b)("inlineCode",{parentName:"li"},"other")," as fallback in the message."),Object(r.b)("li",{parentName:"ul"},"Some translation vendors only accept certain rules.")),Object(r.b)("h4",{id:"available-rules-1"},"Available rules"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"enum LDML {\n  zero = 'zero',\n  one = 'one',\n  two = 'two',\n  few = 'few',\n  many = 'many',\n  other = 'other',\n}\n")),Object(r.b)("h4",{id:"example-1"},"Example"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/enforce-plural-rules": [\n      2,\n      {\n        "one": true,\n        "other": true,\n        "zero": false\n      }\n    ]\n  }\n}\n')),Object(r.b)("h3",{id:"no-camel-case"},Object(r.b)("inlineCode",{parentName:"h3"},"no-camel-case")),Object(r.b)("p",null,"This make sure placeholders are not camel-case."),Object(r.b)("h4",{id:"why-4"},"Why"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"This is to prevent case-sensitivity issue in certain translation vendors.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // WORKS\n  foo: {\n    defaultMessage: 'foo {snake_case} {nothing}',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: 'foo {camelCase}',\n  },\n})\n")),Object(r.b)("h3",{id:"no-emoji"},Object(r.b)("inlineCode",{parentName:"h3"},"no-emoji")),Object(r.b)("p",null,"This prevents usage of emoji in message."),Object(r.b)("h4",{id:"why-5"},"Why"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Certain translation vendors cannot handle emojis."),Object(r.b)("li",{parentName:"ul"},"Cross-platform encoding for emojis are faulty.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // WORKS\n  foo: {\n    defaultMessage: 'Smileys & People',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: '\ud83d\ude03 Smileys & People',\n  },\n})\n")),Object(r.b)("h3",{id:"no-multiple-whitespaces"},Object(r.b)("inlineCode",{parentName:"h3"},"no-multiple-whitespaces")),Object(r.b)("p",null,"This prevents usage of multiple consecutive whitespaces in message."),Object(r.b)("h4",{id:"why-6"},"Why"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Consecutive whitespaces are handled differently in different locales."),Object(r.b)("li",{parentName:"ul"},"Prevents ",Object(r.b)("inlineCode",{parentName:"li"},"\\")," linebreaks in JS string which results in awkward whitespaces.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // WORKS\n  foo: {\n    defaultMessage: 'Smileys & People',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: 'Smileys &   People',\n  },\n  // FAILS\n  baz: {\n    defaultMessage: 'this message is too long \\\n    so I wanna line break it.',\n  },\n})\n")),Object(r.b)("h3",{id:"no-multiple-plurals"},Object(r.b)("inlineCode",{parentName:"h3"},"no-multiple-plurals")),Object(r.b)("p",null,"This prevents specifying multiple plurals in your message."),Object(r.b)("h4",{id:"why-7"},"Why"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Nested plurals are hard to translate across languages so some translation vendors don't allow it.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n    // WORKS\n    foo: {\n        defaultMessage: '{p1, plural, one{one}}',\n    },\n    // FAILS\n    bar: {\n        defaultMessage: '{p1, plural, one{one}} {p2, plural, one{two}}',\n    }\n    // ALSO FAILS\n    bar2: {\n        defaultMessage: '{p1, plural, one{{p2, plural, one{two}}}}',\n    }\n})\n")),Object(r.b)("h3",{id:"no-offset"},Object(r.b)("inlineCode",{parentName:"h3"},"no-offset")),Object(r.b)("p",null,"This prevents specifying offset in plural rules in your message."),Object(r.b)("h4",{id:"why-8"},"Why"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Offset has complicated logic implication so some translation vendors don't allow it.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {defineMessages} from 'react-intl'\n\nconst messages = defineMessages({\n  // PASS\n  foo: {\n    defaultMessage: '{var, plural, one{one} other{other}}',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: '{var, plural, offset:1 one{one} other{other}}',\n  },\n})\n")),Object(r.b)("h3",{id:"enforce-id"},Object(r.b)("inlineCode",{parentName:"h3"},"enforce-id")),Object(r.b)("p",null,"This enforces generated ID to be set in ",Object(r.b)("inlineCode",{parentName:"p"},"MessageDescriptor"),"."),Object(r.b)("h4",{id:"why-9"},"Why"),Object(r.b)("p",null,"Pipelines can enforce automatic ID generation at the linter level (autofix to insert autogen ID) so this guarantees that."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {defineMessages} from 'react-intl';\n\nconst messages = defineMessages({\n  // PASS\n  foo: {\n    id: '19shaf'\n    defaultMessage: '{var, plural, one{one} other{other}}',\n  },\n  // FAILS\n  bar: {\n    id: 'something',\n    defaultMessage: '{var, plural, offset:1 one{one} other{other}}',\n  },\n  // FAILS\n  bar: {\n    defaultMessage: '{var, plural, offset:1 one{one} other{other}}',\n  },\n});\n")),Object(r.b)("h4",{id:"options-2"},"Options"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "plugins": ["formatjs"],\n  "rules": {\n    "formatjs/enforce-id": [\n      "error",\n      {\n        // THIS IS REQUIRED\n        "idInterpolationPattern": "[sha512:contenthash:base64:6]"\n      }\n    ]\n  }\n}\n')))}p.isMDXComponent=!0}}]);