(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{103:function(e,t,a){"use strict";a.d(t,"a",(function(){return m})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),l=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},m=function(e){var t=l(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(a),b=n,u=m["".concat(o,".").concat(b)]||m[b]||d[b]||i;return a?r.a.createElement(u,c(c({ref:t},p),{},{components:a})):r.a.createElement(u,c({ref:t},p))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=b;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:n,o[1]=c;for(var p=2;p<i;p++)o[p]=a[p];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}b.displayName="MDXCreateElement"},91:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return s})),a.d(t,"default",(function(){return l}));var n=a(2),r=a(6),i=(a(0),a(103)),o={id:"advanced-usage",title:"Advanced Usage"},c={unversionedId:"guides/advanced-usage",id:"guides/advanced-usage",isDocsHomePage:!1,title:"Advanced Usage",description:"react-intl is optimized for both runtime & compile time rendering. Below are a few guidelines you can follow if you have a strict performance budget.",source:"@site/docs/guides/advanced-usage.md",permalink:"/docs/guides/advanced-usage",editUrl:"https://github.com/formatjs/formatjs/edit/master/website/docs/guides/advanced-usage.md",sidebar:"docs",previous:{title:"Runtime Requirements",permalink:"/docs/guides/runtime-requirements"},next:{title:"Basic Internationalization Principles",permalink:"/docs/core-concepts/basic-internationalization-principles"}},s=[{value:"Pre-parsing messages",id:"pre-parsing-messages",children:[]},{value:"Imperative APIs",id:"imperative-apis",children:[]},{value:"More examples",id:"more-examples",children:[]}],p={rightToc:s};function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"react-intl")," is optimized for both runtime & compile time rendering. Below are a few guidelines you can follow if you have a strict performance budget."),Object(i.b)("h2",{id:"pre-parsing-messages"},"Pre-parsing messages"),Object(i.b)("p",null,"You can also pre-parse all messages into ",Object(i.b)("inlineCode",{parentName:"p"},"AST")," using ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/tooling/cli"}),Object(i.b)("inlineCode",{parentName:"a"},"@formatjs/cli"))," ",Object(i.b)("inlineCode",{parentName:"p"},"compile")," command and pass that into ",Object(i.b)("inlineCode",{parentName:"p"},"IntlProvider"),". This is especially faster since it saves us time parsing ",Object(i.b)("inlineCode",{parentName:"p"},"string")," into ",Object(i.b)("inlineCode",{parentName:"p"},"AST"),". The use cases for this support are:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Server-side rendering or pre-parsing where you can cache the AST and don't have to pay compilation costs multiple time."),Object(i.b)("li",{parentName:"ol"},"Desktop apps using Electron or CEF where you can preload/precompile things in advanced before runtime.")),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"Caching")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Since this approach uses ",Object(i.b)("inlineCode",{parentName:"p"},"AST")," as the data source, changes to ",Object(i.b)("inlineCode",{parentName:"p"},"intl-messageformat-parser"),"'s ",Object(i.b)("inlineCode",{parentName:"p"},"AST")," will require cache invalidation."))),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(i.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"Asset Size")),Object(i.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},Object(i.b)("inlineCode",{parentName:"p"},"AST")," is also slightly larger in size than regular ",Object(i.b)("inlineCode",{parentName:"p"},"string")," messages but can be efficiently compressed."))),Object(i.b)("p",null,"In the future, we'll gear towards making this the default behavior."),Object(i.b)("h2",{id:"imperative-apis"},"Imperative APIs"),Object(i.b)("p",null,"Imperative APIs (e.g ",Object(i.b)("inlineCode",{parentName:"p"},"formatMessage"),"...) are generally faster than ",Object(i.b)("inlineCode",{parentName:"p"},"Formatted")," component since it does not create extra ",Object(i.b)("inlineCode",{parentName:"p"},"ReactElement")," nodes. They should have the exact same capabilities as ",Object(i.b)("inlineCode",{parentName:"p"},"Formatted")," components."),Object(i.b)("h2",{id:"more-examples"},"More examples"),Object(i.b)("p",null,"Head over to ",Object(i.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/formatjs/formatjs/tree/main/packages/react-intl/examples"}),"https://github.com/formatjs/formatjs/tree/main/packages/react-intl/examples")," for more examples on how to use our libraries."))}l.isMDXComponent=!0}}]);