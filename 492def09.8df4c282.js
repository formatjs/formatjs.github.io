(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{103:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},p=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=b(a),d=n,u=p["".concat(o,".").concat(d)]||p[d]||m[d]||r;return a?i.a.createElement(u,s(s({ref:t},c),{},{components:a})):i.a.createElement(u,s({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},68:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return s})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return b}));var n=a(2),i=a(6),r=(a(0),a(103)),o={id:"api",title:"Imperative API"},s={unversionedId:"react-intl/api",id:"react-intl/api",isDocsHomePage:!1,title:"Imperative API",description:"There are a few API layers that React Intl provides and is built on. When using React Intl you'll be interacting with its API (documented here) and its React components.",source:"@site/docs/react-intl/api.md",permalink:"/docs/react-intl/api",editUrl:"https://github.com/formatjs/formatjs/edit/master/website/docs/react-intl/api.md",sidebar:"api",previous:{title:"Components",permalink:"/docs/react-intl/components"},next:{title:"Upgrade Guide (v4 -> v5)",permalink:"/docs/react-intl/upgrade-guide-5x"}},l=[{value:"FormatJS Internationalization Formatters",id:"formatjs-internationalization-formatters",children:[]},{value:"<code>defineMessages/defineMessage</code>",id:"definemessagesdefinemessage",children:[]},{value:"Injection API",id:"injection-api",children:[{value:"<code>useIntl</code> hook",id:"useintl-hook",children:[]},{value:"<code>injectIntl</code> HOC",id:"injectintl-hoc",children:[]},{value:"<code>IntlShape</code>",id:"intlshape",children:[]},{value:"<code>createIntl</code>",id:"createintl",children:[]}]},{value:"Date Formatting APIs",id:"date-formatting-apis",children:[{value:"<code>formatDate</code>",id:"formatdate",children:[]},{value:"<code>formatTime</code>",id:"formattime",children:[]},{value:"<code>formatRelativeTime</code>",id:"formatrelativetime",children:[]}]},{value:"Number Formatting APIs",id:"number-formatting-apis",children:[{value:"<code>formatNumber</code>",id:"formatnumber",children:[]},{value:"<code>formatPlural</code>",id:"formatplural",children:[]}]},{value:"List Formatting APIs",id:"list-formatting-apis",children:[{value:"<code>formatList</code>",id:"formatlist",children:[]}]},{value:"Message Formatting APIs",id:"message-formatting-apis",children:[{value:"Message Syntax",id:"message-syntax",children:[]},{value:"Message Descriptor",id:"message-descriptor",children:[]},{value:"Message Formatting Fallbacks",id:"message-formatting-fallbacks",children:[]},{value:"<code>formatMessage</code>",id:"formatmessage",children:[]}]},{value:"Other Formatting APIs",id:"other-formatting-apis",children:[{value:"<code>formatDisplayName</code>",id:"formatdisplayname",children:[]}]}],c={rightToc:l};function b(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"There are a few API layers that React Intl provides and is built on. When using React Intl you'll be interacting with its API (documented here) and its React ","[components][components]","."),Object(r.b)("h2",{id:"formatjs-internationalization-formatters"},"FormatJS Internationalization Formatters"),Object(r.b)("p",null,"Beyond number, date & relative time formatting, React Intl provides string/message formatting. This formatter is part of the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"http://formatjs.io/"}),"FormatJS")," project, which React Intl is also a part of. This formatter was developed in the same style as the built-in formatters."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/intl-messageformat"}),Object(r.b)("inlineCode",{parentName:"a"},"IntlMessageFormat")))),Object(r.b)("p",null,"React Intl wraps these APIs in the same way it wraps the built-in Intl APIs."),Object(r.b)("h2",{id:"definemessagesdefinemessage"},Object(r.b)("inlineCode",{parentName:"h2"},"defineMessages/defineMessage")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"interface MessageDescriptor {\n  id: string;\n  description?: string | object;\n  defaultMessage?: string;\n}\n\nfunction defineMessages(\n  messageDescriptors: Record<string, MessageDescriptor>\n): Record<string, MessageDescriptor>;\n\nfunction defineMessage(messageDescriptor: MessageDescriptor): MessageDescriptor;\n")),Object(r.b)("p",null,"These functions is exported by the ",Object(r.b)("inlineCode",{parentName:"p"},"react-intl")," package and is simply a ",Object(r.b)("em",{parentName:"p"},"hook")," for the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/tooling/babel-plugin"}),"babel-plugin-react-intl")," package to use when extracting default messages defined in JavaScript source files. This function simply returns the Message Descriptor map object that's passed-in."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"import {defineMessages, defineMessage} from 'react-intl';\n\nconst messages = defineMessages({\n  greeting: {\n    id: 'app.home.greeting',\n    description: 'Message to greet the user.',\n    defaultMessage: 'Hello, {name}!',\n  },\n});\n\nconst msg = defineMessage({\n  id: 'single',\n  defaultMessage: 'single message',\n  description: 'header',\n});\n")),Object(r.b)("h2",{id:"injection-api"},"Injection API"),Object(r.b)("p",null,"React Intl provides:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#useintl-hook"}),Object(r.b)("inlineCode",{parentName:"a"},"useIntl")," hook"),": to ",Object(r.b)("em",{parentName:"li"},"hook")," the imperative formatting API into a React function component (with React version >= 16.8)."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#injectintl-hoc"}),Object(r.b)("inlineCode",{parentName:"a"},"injectIntl")," HOC"),": to ",Object(r.b)("em",{parentName:"li"},"inject")," the imperative formatting API into a React class or function component via its ",Object(r.b)("inlineCode",{parentName:"li"},"props"),"."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#createintl"}),Object(r.b)("inlineCode",{parentName:"a"},"createIntl")),": to create ",Object(r.b)("inlineCode",{parentName:"li"},"IntlShape")," object outside of React lifecycle.")),Object(r.b)("p",null,"These should be used when your React component needs to format data to a string value where a React element is not suitable; e.g., a ",Object(r.b)("inlineCode",{parentName:"p"},"title")," or ",Object(r.b)("inlineCode",{parentName:"p"},"aria")," attribute, or for side-effect in ",Object(r.b)("inlineCode",{parentName:"p"},"componentDidMount"),"."),Object(r.b)("h3",{id:"useintl-hook"},Object(r.b)("inlineCode",{parentName:"h3"},"useIntl")," hook"),Object(r.b)("p",null,"If a component can be expressed in a form of function component, using ",Object(r.b)("inlineCode",{parentName:"p"},"useIntl")," hook can be handy. This ",Object(r.b)("inlineCode",{parentName:"p"},"useIntl")," hook do not expect any option as its argument when being called. Typically, here is how you would like to use:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"import React from 'react';\nimport {useIntl, FormattedDate} from 'react-intl';\n\nconst FunctionComponent: React.FC<{date: number | Date}> = ({date}) => {\n  const intl = useIntl();\n  return (\n    <span title={intl.formatDate(date)}>\n      <FormattedDate value={date} />\n    </span>\n  );\n};\n\nexport default FunctionComponent;\n")),Object(r.b)("p",null,"To keep the API surface clean and simple, we only provide ",Object(r.b)("inlineCode",{parentName:"p"},"useIntl")," hook in the package. If preferable, user can wrap this built-in hook to make customized hook like ",Object(r.b)("inlineCode",{parentName:"p"},"useFormatMessage")," easily. Please visit React's official website for more general ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://reactjs.org/docs/hooks-intro.html"}),"introduction on React hooks"),"."),Object(r.b)("h3",{id:"injectintl-hoc"},Object(r.b)("inlineCode",{parentName:"h3"},"injectIntl")," HOC"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"type WrappedComponentProps<IntlPropName extends string = 'intl'> = {\n  [k in IntlPropName]: IntlShape;\n};\n\ntype WithIntlProps<P> = Omit<P, keyof WrappedComponentProps> & {\n  forwardedRef?: React.Ref<any>;\n};\n\nfunction injectIntl<\n  IntlPropName extends string = 'intl',\n  P extends WrappedComponentProps<IntlPropName> = WrappedComponentProps<any>\n>(\n  WrappedComponent: React.ComponentType<P>,\n  options?: Opts<IntlPropName>\n): React.ComponentType<WithIntlProps<P>> & {\n  WrappedComponent: typeof WrappedComponent;\n};\n")),Object(r.b)("p",null,"This function is exported by the ",Object(r.b)("inlineCode",{parentName:"p"},"react-intl")," package and is a High-Order Component (HOC) factory. It will wrap the passed-in React component with another React component which provides the imperative formatting API into the wrapped component via its ",Object(r.b)("inlineCode",{parentName:"p"},"props"),". (This is similar to the connect-to-stores pattern found in many Flux implementations.)"),Object(r.b)("p",null,"By default, the formatting API will be provided to the wrapped component via ",Object(r.b)("inlineCode",{parentName:"p"},"props.intl"),", but this can be overridden when specifying ",Object(r.b)("inlineCode",{parentName:"p"},"options.intlPropName"),". The value of the prop will be of type ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#Intlshape"}),Object(r.b)("inlineCode",{parentName:"a"},"IntlShape")),", defined in the next section."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"import React, {PropTypes} from 'react';\nimport {injectIntl, FormattedDate} from 'react-intl';\n\ninterface Props {\n  date: Date | number;\n}\n\nconst FunctionalComponent: React.FC<Props> = props => {\n  const {\n    date,\n    intl, // Injected by `injectIntl`\n  } = props;\n  return (\n    <span title={intl.formatDate(date)}>\n      <FormattedDate value={date} />\n    </span>\n  );\n};\n\nexport default injectIntl(FunctionalComponent);\n")),Object(r.b)("h3",{id:"intlshape"},Object(r.b)("inlineCode",{parentName:"h3"},"IntlShape")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"interface IntlConfig {\n  locale: string;\n  timeZone?: string;\n  formats: CustomFormats;\n  textComponent?: React.ComponentType | keyof React.ReactHTML;\n  messages: Record<string, string> | Record<string, MessageFormatElement[]>;\n  defaultLocale: string;\n  defaultFormats: CustomFormats;\n  onError(err: string): void;\n}\n\ninterface IntlFormatters {\n  formatDate(value: number | Date, opts: FormatDateOptions): string;\n  formatTime(value: number | Date, opts: FormatDateOptions): string;\n  formatRelativeTime(\n    value: number,\n    unit: Unit,\n    opts: FormatRelativeOptions\n  ): string;\n  formatNumber(value: number, opts: FormatNumberOptions): string;\n  formatPlural(value: number, opts: FormatPluralOptions): string;\n  formatMessage(descriptor: MessageDescriptor, values: any): string;\n}\n\ntype IntlShape = IntlConfig & IntlFormatters;\n")),Object(r.b)("p",null,"This interface is exported by the ",Object(r.b)("inlineCode",{parentName:"p"},"react-intl")," package that can be used in conjunction with the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#injectintl"}),Object(r.b)("inlineCode",{parentName:"a"},"injectIntl"))," HOC factory function."),Object(r.b)("p",null,"The definition above shows what the ",Object(r.b)("inlineCode",{parentName:"p"},"props.intl")," object will look like that's injected to your component via ",Object(r.b)("inlineCode",{parentName:"p"},"injectIntl"),". It's made up of three parts:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"IntlConfig"),":")," The intl metadata passed as props into the parent ",Object(r.b)("inlineCode",{parentName:"li"},"<IntlProvider>"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"IntlFormatters"),":")," The imperative formatting API described below.")),Object(r.b)("h3",{id:"createintl"},Object(r.b)("inlineCode",{parentName:"h3"},"createIntl")),Object(r.b)("p",null,"This allows you to create an ",Object(r.b)("inlineCode",{parentName:"p"},"IntlShape")," object without using ",Object(r.b)("inlineCode",{parentName:"p"},"Provider"),". This allows you to format things outside of React lifecycle while reusing the same ",Object(r.b)("inlineCode",{parentName:"p"},"intl")," object. For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"import {createIntl, createIntlCache, RawIntlProvider} from 'react-intl'\n\n// This is optional but highly recommended\n// since it prevents memory leak\nconst cache = createIntlCache()\n\nconst intl = createIntl({\n  locale: 'fr-FR',\n  messages: {}\n}, cache)\n\n// Call imperatively\nintl.formatNumber(20)\n\n// Pass it to IntlProvider\n<RawIntlProvider value={intl}>{foo}</RawIntlProvider>\n")),Object(r.b)("h2",{id:"date-formatting-apis"},"Date Formatting APIs"),Object(r.b)("p",null,"React Intl provides three functions to format dates:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#formatdate"}),Object(r.b)("inlineCode",{parentName:"a"},"formatDate"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#formattime"}),Object(r.b)("inlineCode",{parentName:"a"},"formatTime"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#formatrelativetime"}),Object(r.b)("inlineCode",{parentName:"a"},"formatRelativeTime")))),Object(r.b)("p",null,"These APIs are used by their corresponding ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/react-intl/components#formatteddate"}),Object(r.b)("inlineCode",{parentName:"a"},"<FormattedDate>")),", ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/react-intl/components#formattedtime"}),Object(r.b)("inlineCode",{parentName:"a"},"<FormattedTime>")),", and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/react-intl/components#formattedrelative"}),Object(r.b)("inlineCode",{parentName:"a"},"<FormattedRelativeTime>"))," components and can be ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#injectintl"}),"injected")," into your component via its ",Object(r.b)("inlineCode",{parentName:"p"},"props"),"."),Object(r.b)("p",null,"Each of these APIs support custom named formats via their ",Object(r.b)("inlineCode",{parentName:"p"},"format")," option which can be specified on ",Object(r.b)("inlineCode",{parentName:"p"},"<IntlProvider>"),". Both ",Object(r.b)("inlineCode",{parentName:"p"},"formatDate")," and ",Object(r.b)("inlineCode",{parentName:"p"},"formatTime")," use ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"}),Object(r.b)("inlineCode",{parentName:"a"},"Intl.DateTimeFormat"))," options"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"See:")," The ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat"}),Object(r.b)("inlineCode",{parentName:"a"},"Intl.DateTimeFormat"))," docs for details on each of these options."),Object(r.b)("h3",{id:"formatdate"},Object(r.b)("inlineCode",{parentName:"h3"},"formatDate")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"function formatDate(\n  value: number | Date,\n  options?: Intl.DateTimeFormatOptions & {format?: string}\n): string;\n")),Object(r.b)("p",null,"This function will return a formatted date string. It expects a ",Object(r.b)("inlineCode",{parentName:"p"},"value")," which can be parsed as a date (i.e., ",Object(r.b)("inlineCode",{parentName:"p"},"isFinite(new Date(value))"),"), and accepts ",Object(r.b)("inlineCode",{parentName:"p"},"options")," that conform to ",Object(r.b)("inlineCode",{parentName:"p"},"DateTimeFormatOptions"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"formatDate(Date.now(), {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n}); // \"3/4/2016\"\n")),Object(r.b)("h3",{id:"formattime"},Object(r.b)("inlineCode",{parentName:"h3"},"formatTime")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"function formatTime(\n  value: number | Date,\n  options?: Intl.DateTimeFormatOptions & {format?: string}\n): string;\n")),Object(r.b)("p",null,"This function will return a formatted date string, but it differs from ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#formatdate"}),Object(r.b)("inlineCode",{parentName:"a"},"formatDate"))," by having the following default options:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"{\n    hour: 'numeric',\n    minute: 'numeric',\n}\n")),Object(r.b)("p",null,"It expects a ",Object(r.b)("inlineCode",{parentName:"p"},"value")," which can be parsed as a date (i.e., ",Object(r.b)("inlineCode",{parentName:"p"},"isFinite(new Date(value))"),"), and accepts ",Object(r.b)("inlineCode",{parentName:"p"},"options")," that conform to ",Object(r.b)("inlineCode",{parentName:"p"},"DateTimeFormatOptions"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'formatTime(Date.now()); // "4:03 PM"\n')),Object(r.b)("h3",{id:"formatrelativetime"},Object(r.b)("inlineCode",{parentName:"h3"},"formatRelativeTime")),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"browser support")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This requires ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/RelativeTimeFormat"}),"Intl.RelativeTimeFormat")," which has limited browser support. Please use our ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/polyfills/intl-relativetimeformat"}),"polyfill")," if you plan to support them."))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"type Unit =\n  | 'second'\n  | 'minute'\n  | 'hour'\n  | 'day'\n  | 'week'\n  | 'month'\n  | 'quarter'\n  | 'year';\n\ntype RelativeTimeFormatOptions = {\n  numeric?: 'always' | 'auto';\n  style?: 'long' | 'short' | 'narrow';\n};\n\nfunction formatRelativeTime(\n  value: number,\n  unit: Unit,\n  options?: Intl.RelativeTimeFormatOptions & {\n    format?: string;\n  }\n): string;\n")),Object(r.b)("p",null,'This function will return a formatted relative time string (e.g., "1 hour ago"). It expects a ',Object(r.b)("inlineCode",{parentName:"p"},"value")," which is a number, a ",Object(r.b)("inlineCode",{parentName:"p"},"unit")," and ",Object(r.b)("inlineCode",{parentName:"p"},"options")," that conform to ",Object(r.b)("inlineCode",{parentName:"p"},"Intl.RelativeTimeFormatOptions"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"formatRelativeTime(0); // \"now\"\nformatRelativeTime(-1); // \"1 second ago\"\nformatRelativeTime(1, 'hour'); // \"in 1 hour\"\nformatRelativeTime(-1, 'day', {numeric: 'auto'}); // \"yesterday\"\nformatRelativeTime(-1, 'day'); // \"1 day ago\"\nformatRelativeTime(-24, 'hour'); // \"24 hours ago\"\nformatRelativeTime(-24, 'hour', {style: 'narrow'}); // \"24 hr. ago\"\n")),Object(r.b)("h2",{id:"number-formatting-apis"},"Number Formatting APIs"),Object(r.b)("p",null,"React Intl provides two functions to format numbers:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#formatnumber"}),Object(r.b)("inlineCode",{parentName:"a"},"formatNumber"))),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(n.a)({parentName:"li"},{href:"#formatplural"}),Object(r.b)("inlineCode",{parentName:"a"},"formatPlural")))),Object(r.b)("p",null,"These APIs are used by their corresponding ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/react-intl/components#formattednumber"}),Object(r.b)("inlineCode",{parentName:"a"},"<FormattedNumber>")),", and ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/react-intl/components#formattedplural"}),Object(r.b)("inlineCode",{parentName:"a"},"<FormattedPlural>"))," components and can be ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#injectintl"}),"injected")," into your component via its ",Object(r.b)("inlineCode",{parentName:"p"},"props"),"."),Object(r.b)("h3",{id:"formatnumber"},Object(r.b)("inlineCode",{parentName:"h3"},"formatNumber")),Object(r.b)("p",null,"This function uses ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NumberFormat"}),Object(r.b)("inlineCode",{parentName:"a"},"Intl.NumberFormat"))," options."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"function formatNumber(\n  value: number,\n  options?: Intl.NumberFormatOptions & {format?: string}\n): string;\n")),Object(r.b)("p",null,"This function will return a formatted number string. It expects a ",Object(r.b)("inlineCode",{parentName:"p"},"value")," which can be parsed as a number, and accepts ",Object(r.b)("inlineCode",{parentName:"p"},"options")," that conform to ",Object(r.b)("inlineCode",{parentName:"p"},"NumberFormatOptions"),"."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"formatNumber(1000); // \"1,000\"\nformatNumber(0.5, {style: 'percent'}); // \"50%\"\nformatNumber(1000, {style: 'currency', currency: 'USD'}); // $1,000\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Formatting Number using ",Object(r.b)("inlineCode",{parentName:"strong"},"unit"))),Object(r.b)("p",null,"Currently this is part of ES2020 ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://tc39.es/ecma402/#numberformat-objects"}),"NumberFormat"),".\nWe've provided a polyfill ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/polyfills/intl-numberformat"}),"here")," and ",Object(r.b)("inlineCode",{parentName:"p"},"react-intl")," types allow users to pass\nin a ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/polyfills/intl-numberformat#SupportedUnits"}),"sanctioned unit"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"formatNumber(1000, {\n  style: 'unit',\n  unit: 'kilobyte',\n  unitDisplay: 'narrow',\n}); // \"1,000kB\"\n\nformatNumber(1000, {\n  unit: 'fahrenheit',\n  unitDisplay: 'long',\n  style: 'unit',\n}); // \"1,000 degrees Fahrenheit\"\n")),Object(r.b)("h3",{id:"formatplural"},Object(r.b)("inlineCode",{parentName:"h3"},"formatPlural")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"type PluralFormatOptions = {\n  type?: 'cardinal' | 'ordinal' = 'cardinal';\n};\n\nfunction formatPlural(\n  value: number,\n  options?: Intl.PluralFormatOptions\n): 'zero' | 'one' | 'two' | 'few' | 'many' | 'other';\n")),Object(r.b)("p",null,"This function will return a plural category string: ",Object(r.b)("inlineCode",{parentName:"p"},'"zero"'),", ",Object(r.b)("inlineCode",{parentName:"p"},'"one"'),", ",Object(r.b)("inlineCode",{parentName:"p"},'"two"'),", ",Object(r.b)("inlineCode",{parentName:"p"},'"few"'),", ",Object(r.b)("inlineCode",{parentName:"p"},'"many"'),", or ",Object(r.b)("inlineCode",{parentName:"p"},'"other"'),". It expects a ",Object(r.b)("inlineCode",{parentName:"p"},"value")," which can be parsed as a number, and accepts ",Object(r.b)("inlineCode",{parentName:"p"},"options")," that conform to ",Object(r.b)("inlineCode",{parentName:"p"},"PluralFormatOptions"),"."),Object(r.b)("p",null,"This is a low-level utility whose output could be provided to a ",Object(r.b)("inlineCode",{parentName:"p"},"switch")," statement to select a particular string to display."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'formatPlural(0); // "other"\nformatPlural(1); // "one"\nformatPlural(2); // "other"\nformatPlural(2, {style: \'ordinal\'}); // "two"\nformatPlural(3, {style: \'ordinal\'}); // "few"\nformatPlural(4, {style: \'ordinal\'}); // "other"\n')),Object(r.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})))),"multiple language support")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This function should only be used in apps that only need to support one language. If your app supports multiple languages use ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#formatmessage"}),Object(r.b)("inlineCode",{parentName:"a"},"formatMessage"))," instead."))),Object(r.b)("h2",{id:"list-formatting-apis"},"List Formatting APIs"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"This is currently stage 3 so ",Object(r.b)("a",Object(n.a)({parentName:"strong"},{href:"/docs/polyfills/intl-listformat"}),"polyfill")," would be required.")),Object(r.b)("h3",{id:"formatlist"},Object(r.b)("inlineCode",{parentName:"h3"},"formatList")),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"browser support")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This requires ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/ListFormat"}),"Intl.ListFormat")," which has limited browser support. Please use our ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/polyfills/intl-listformat"}),"polyfill")," if you plan to support them."))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"type ListFormatOptions = {\n  type?: 'disjunction' | 'conjunction' | 'unit';\n  style?: 'long' | 'short' | 'narrow';\n};\n\nfunction formatList(\n  elements: (string | React.ReactNode)[],\n  options?: Intl.ListFormatOptions\n): string | React.ReactNode[];\n")),Object(r.b)("p",null,"This function allows you to join list of things together in an i18n-safe way. For example, when the locale is ",Object(r.b)("inlineCode",{parentName:"p"},"en"),":"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"formatList(['Me', 'myself', 'I'], {type: 'conjunction'}); // Me, myself, and I\nformatList(['5 hours', '3 minutes'], {type: 'unit'}); // 5 hours, 3 minutes\n")),Object(r.b)("h2",{id:"message-formatting-apis"},"Message Formatting APIs"),Object(r.b)("h3",{id:"message-syntax"},"Message Syntax"),Object(r.b)("p",null,"String/Message formatting is a paramount feature of React Intl and it builds on ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"http://userguide.icu-project.org/formatparse/messages"}),"ICU Message Formatting")," by using the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/core-concepts/icu-syntax"}),"ICU Message Syntax"),". This message syntax allows for simple to complex messages to be defined, translated, and then formatted at runtime."),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Simple Message:")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"Hello, {name}\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"Complex Message:")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"Hello, {name}, you have {itemCount, plural,\n    =0 {no items}\n    one {# item}\n    other {# items}\n}.\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},"See:")," The ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/core-concepts/icu-syntax"}),"Message Syntax Guide"),"."),Object(r.b)("h3",{id:"message-descriptor"},"Message Descriptor"),Object(r.b)("p",null,"React Intl has a Message Descriptor concept which is used to define your app's default messages/strings and is passed into ",Object(r.b)("inlineCode",{parentName:"p"},"formatMessage"),". The Message Descriptors work very well for providing the data necessary for having the strings/messages translated, and they contain the following properties:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"id"),":")," A unique, stable identifier for the message"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"description"),":")," Context for the translator about how it's used in the UI"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"strong"},"defaultMessage"),":")," The default message (probably in English)")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"type MessageDescriptor = {\n  id: string;\n  defaultMessage?: string;\n  description?: string | object;\n};\n")),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"babel-plugin-react-intl")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"The ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/tooling/babel-plugin"}),"babel-plugin-react-intl")," package can be used to extract Message Descriptors defined in JavaScript source files."))),Object(r.b)("h3",{id:"message-formatting-fallbacks"},"Message Formatting Fallbacks"),Object(r.b)("p",null,"The message formatting APIs go the extra mile to provide fallbacks for the common situations where formatting fails; at the very least a non-empty string should always be returned. Here's the message formatting fallback algorithm:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Lookup and format the translated message at ",Object(r.b)("inlineCode",{parentName:"li"},"id"),", passed to ",Object(r.b)("inlineCode",{parentName:"li"},"<IntlProvider>"),"."),Object(r.b)("li",{parentName:"ol"},"Fallback to formatting the ",Object(r.b)("inlineCode",{parentName:"li"},"defaultMessage"),"."),Object(r.b)("li",{parentName:"ol"},"Fallback to source of translated message at ",Object(r.b)("inlineCode",{parentName:"li"},"id"),"."),Object(r.b)("li",{parentName:"ol"},"Fallback to source of ",Object(r.b)("inlineCode",{parentName:"li"},"defaultMessage"),"."),Object(r.b)("li",{parentName:"ol"},"Fallback to the literal message ",Object(r.b)("inlineCode",{parentName:"li"},"id"),".")),Object(r.b)("p",null,'Above, "source" refers to using the template as is, without any substitutions made.'),Object(r.b)("h3",{id:"formatmessage"},Object(r.b)("inlineCode",{parentName:"h3"},"formatMessage")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"type MessageFormatPrimitiveValue = string | number | boolean | null | undefined;\nfunction formatMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<string, MessageFormatPrimitiveValue>\n): string;\nfunction formatMessage(\n  descriptor: MessageDescriptor,\n  values?: Record<\n    string,\n    MessageFormatPrimitiveValue | React.ReactElement | FormatXMLElementFn\n  >\n): string | React.ReactNodeArray;\n")),Object(r.b)("p",null,"This function will return a formatted message string. It expects a ",Object(r.b)("inlineCode",{parentName:"p"},"MessageDescriptor")," with at least an ",Object(r.b)("inlineCode",{parentName:"p"},"id")," property, and accepts a shallow ",Object(r.b)("inlineCode",{parentName:"p"},"values")," object which are used to fill placeholders in the message."),Object(r.b)("p",null,"If a translated message with the ",Object(r.b)("inlineCode",{parentName:"p"},"id")," has been passed to the ",Object(r.b)("inlineCode",{parentName:"p"},"<IntlProvider>")," via its ",Object(r.b)("inlineCode",{parentName:"p"},"messages")," prop it will be formatted, otherwise it will fallback to formatting ",Object(r.b)("inlineCode",{parentName:"p"},"defaultMessage"),". See: ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#message-formatting-fallbacks"}),"Message Formatting Fallbacks")," for more details."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"const messages = defineMessages({\n  greeting: {\n    id: 'app.greeting',\n    defaultMessage: 'Hello, {name}!',\n    description: 'Greeting to welcome the user to the app',\n  },\n});\n\nformatMessage(messages.greeting, {name: 'Eric'}); // \"Hello, Eric!\"\n")),Object(r.b)("p",null,"with ",Object(r.b)("inlineCode",{parentName:"p"},"ReactElement")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"const messages = defineMessages({\n  greeting: {\n    id: 'app.greeting',\n    defaultMessage: 'Hello, {name}!',\n    description: 'Greeting to welcome the user to the app',\n  },\n});\n\nformatMessage(messages.greeting, {name: <b>Eric</b>}); // ['Hello, ', <b>Eric</b>, '!']\n")),Object(r.b)("p",null,"with rich text formatting"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),"const messages = defineMessages({\n  greeting: {\n    id: 'app.greeting',\n    defaultMessage: 'Hello, <bold>{name}</bold>!',\n    description: 'Greeting to welcome the user to the app',\n  },\n});\n\nformatMessage(messages.greeting, {\n  name: 'Eric',\n  bold: str => <b>{str}</b>,\n}); // ['Hello, ', <b>Eric</b>, '!']\n")),Object(r.b)("p",null,"The message we defined using ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"#definemessages"}),Object(r.b)("inlineCode",{parentName:"a"},"defineMessages"))," to support extraction via ",Object(r.b)("inlineCode",{parentName:"p"},"babel-plugin-react-intl"),", but it doesn't have to be if you're not using the Babel plugin."),Object(r.b)("div",{className:"admonition admonition-info alert alert--info"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})))),"simple message")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"Messages can be simple strings ",Object(r.b)("em",{parentName:"p"},"without")," placeholders, and that's the most common type of message."))),Object(r.b)("h2",{id:"other-formatting-apis"},"Other Formatting APIs"),Object(r.b)("h3",{id:"formatdisplayname"},Object(r.b)("inlineCode",{parentName:"h3"},"formatDisplayName")),Object(r.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(r.b)("h5",{parentName:"div"},Object(r.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(r.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"}),Object(r.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})))),"browser support")),Object(r.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(r.b)("p",{parentName:"div"},"This requires ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DisplayNames"}),"Intl.DisplayNames")," which has limited browser support. Please use our ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"/docs/polyfills/intl-displaynames"}),"polyfill")," if you plan to support them."))),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"type FormatDisplayNameOptions = {\n  style?: 'narrow' | 'short' | 'long';\n  type?: 'language' | 'region' | 'script' | 'currency';\n  fallback?: 'code' | 'none';\n};\n\nfunction formatDisplayName(\n  value: string | number | object,\n  options?: FormatDisplayNameOptions\n): string | undefined;\n")),Object(r.b)("p",null,"Usage examples:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-ts"}),"// When locale is `en`\nformatDisplayName('zh-Hans-SG'); //=> Simplified Chinese (Singapore)\n// When locale is `zh`\nformatDisplayName('zh-Hans-SG'); //=> \u7b80\u4f53\u4e2d\u6587\uff08\u65b0\u52a0\u5761\uff09\n\n// When locale is `en`...\n// ISO-15924 four letters script code to localized display name\nformatDisplayName('Deva', {type: 'script'}); //=> Devanagari\n// ISO-4217 currency code to localized display name\nformatDisplayName('CNY', {type: 'currency'}); //=> Chinese Yuan\n// ISO-3166 two letters region code to localized display name\nformatDisplayName('UN', {type: 'region'}); //=> United Nations\n")))}b.isMDXComponent=!0}}]);