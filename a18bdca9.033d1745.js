(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{163:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var r=n(1),a=n(9),i=(n(0),n(176)),o={id:"advanced-usage",title:"Advanced Usage"},s={id:"react-intl/advanced-usage",title:"Advanced Usage",description:"`react-intl` is optimized for both runtime & compile time rendering. Below are a few guidelines you can follow if you have a strict performance budget.",source:"@site/docs/react-intl/advanced-usage.md",permalink:"/docs/react-intl/advanced-usage",editUrl:"https://github.com/formatjs/formatjs/edit/master/website/docs/react-intl/advanced-usage.md",sidebar:"docs",previous:{title:"Testing with react-intl",permalink:"/docs/react-intl/testing"},next:{title:"Upgrade Guide (v4 -> v5)",permalink:"/docs/react-intl/upgrade-guide-4x"}},c=[{value:"Pre-parsing messages",id:"pre-parsing-messages",children:[{value:"Caveats",id:"caveats",children:[]}]},{value:"Imperative APIs",id:"imperative-apis",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"react-intl")," is optimized for both runtime & compile time rendering. Below are a few guidelines you can follow if you have a strict performance budget."),Object(i.b)("h2",{id:"pre-parsing-messages"},"Pre-parsing messages"),Object(i.b)("p",null,"You can also pre-parse all messages into ",Object(i.b)("inlineCode",{parentName:"p"},"AST")," using ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/intl-messageformat-parser"}),Object(i.b)("inlineCode",{parentName:"a"},"intl-messageformat-parser"))," and pass that into ",Object(i.b)("inlineCode",{parentName:"p"},"IntlProvider"),". This is especially faster since it saves us time parsing ",Object(i.b)("inlineCode",{parentName:"p"},"string")," into ",Object(i.b)("inlineCode",{parentName:"p"},"AST"),". The use cases for this support are:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Server-side rendering or pre-parsing where you can cache the AST and don't have to pay compilation costs multiple time."),Object(i.b)("li",{parentName:"ol"},"Desktop apps using Electron or CEF where you can preload/precompile things in advanced before runtime.")),Object(i.b)("p",null,"Example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-tsx"}),"// Pre-processed\nimport parser from 'intl-messageformat-parser';\nconst messages = {\n  ast_simple: parser.parse('hello world'),\n  ast_var: parser.parse('hello world, {name}'),\n};\n\n// During runtime\n// ES6 import\nimport {IntlProvider, FormattedMessage} from 'react-intl';\nimport * as ReactDOM from 'react-dom';\n\nReactDOM.render(\n  <IntlProvider messages={messages}>\n    <FormattedMessage id=\"ast_simple\" />\n  </IntlProvider>\n); // will render `hello world`\n")),Object(i.b)("h3",{id:"caveats"},"Caveats"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Since this approach uses ",Object(i.b)("inlineCode",{parentName:"li"},"AST")," as the data source, changes to ",Object(i.b)("inlineCode",{parentName:"li"},"intl-messageformat-parser"),"'s ",Object(i.b)("inlineCode",{parentName:"li"},"AST")," will require cache invalidation"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AST")," is also larger in size than regular ",Object(i.b)("inlineCode",{parentName:"li"},"string")," messages but can be efficiently compressed")),Object(i.b)("h2",{id:"imperative-apis"},"Imperative APIs"),Object(i.b)("p",null,"Imperative APIs (e.g ",Object(i.b)("inlineCode",{parentName:"p"},"formatMessage"),"...) are generally faster than ",Object(i.b)("inlineCode",{parentName:"p"},"Formatted")," component since it does not create extra ",Object(i.b)("inlineCode",{parentName:"p"},"ReactElement")," nodes. They should have the exact same capabilities as ",Object(i.b)("inlineCode",{parentName:"p"},"Formatted")," components."))}p.isMDXComponent=!0},176:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return b}));var r=n(0),a=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=a.a.createContext({}),p=function(e){var t=a.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},m=function(e){var t=p(e.components);return a.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=Object(r.forwardRef)((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(n),u=r,b=m["".concat(o,".").concat(u)]||m[u]||d[u]||i;return n?a.a.createElement(b,s({ref:t},l,{components:n})):a.a.createElement(b,s({ref:t},l))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);