(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{116:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return u}));var n=a(0),r=a.n(n);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=r.a.createContext({}),b=function(e){var t=r.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=b(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=b(a),m=n,u=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return a?r.a.createElement(u,l(l({ref:t},c),{},{components:a})):r.a.createElement(u,l({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,i[1]=l;for(var c=2;c<o;c++)i[c]=a[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,a)}m.displayName="MDXCreateElement"},117:function(e,t,a){"use strict";function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}},118:function(e,t,a){"use strict";var n=a(0),r=a(119);t.a=function(){const e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},119:function(e,t,a){"use strict";var n=a(0);const r=Object(n.createContext)(void 0);t.a=r},120:function(e,t,a){"use strict";var n=a(0),r=a.n(n),o=a(118),i=a(117),l=a(52),s=a.n(l);const c=37,b=39;t.a=function(e){const{lazy:t,block:a,children:l,defaultValue:p,values:d,groupId:m,className:u}=e,{tabGroupChoices:g,setTabGroupChoices:f}=Object(o.a)(),[j,O]=Object(n.useState)(p);if(null!=m){const e=g[m];null!=e&&e!==j&&d.some((t=>t.value===e))&&O(e)}const h=e=>{O(e),null!=m&&f(m,e)},v=[];return r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":a},u)},d.map((({value:e,label:t})=>r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===e,className:Object(i.a)("tabs__item",s.a.tabItem,{"tabs__item--active":j===e}),key:e,ref:e=>v.push(e),onKeyDown:e=>{((e,t,a)=>{switch(a.keyCode){case b:((e,t)=>{const a=e.indexOf(t)+1;e[a]?e[a].focus():e[0].focus()})(e,t);break;case c:((e,t)=>{const a=e.indexOf(t)-1;e[a]?e[a].focus():e[e.length-1].focus()})(e,t)}})(v,e.target,e)},onFocus:()=>h(e),onClick:()=>{h(e)}},t)))),t?Object(n.cloneElement)(l.filter((e=>e.props.value===j))[0],{className:"margin-vert--md"}):r.a.createElement("div",{className:"margin-vert--md"},l.map(((e,t)=>Object(n.cloneElement)(e,{key:t,hidden:e.props.value!==j})))))}},121:function(e,t,a){"use strict";var n=a(3),r=a(0),o=a.n(r);t.a=function({children:e,hidden:t,className:a}){return o.a.createElement("div",Object(n.a)({role:"tabpanel"},{hidden:t,className:a}),e)}},99:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return s})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return b})),a.d(t,"default",(function(){return d}));var n=a(3),r=a(7),o=(a(0),a(116)),i=a(120),l=a(121),s={id:"babel-plugin",title:"babel-plugin-formatjs"},c={unversionedId:"tooling/babel-plugin",id:"tooling/babel-plugin",isDocsHomePage:!1,title:"babel-plugin-formatjs",description:"Process string messages for translation from modules that use react-intl, specifically:",source:"@site/docs/tooling/babel-plugin.md",slug:"/tooling/babel-plugin",permalink:"/docs/tooling/babel-plugin",editUrl:"https://github.com/formatjs/formatjs/edit/main/website/docs/tooling/babel-plugin.md",version:"current",sidebar:"tooling",previous:{title:"eslint-plugin-formatjs",permalink:"/docs/tooling/linter"},next:{title:"ts-transformer",permalink:"/docs/tooling/ts-transformer"}},b=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[{value:"Via <code>babel.config.json</code> (Recommended)",id:"via-babelconfigjson-recommended",children:[]}]},{value:"Options",id:"options",children:[{value:"<strong><code>moduleSourceName</code></strong>",id:"modulesourcename",children:[]},{value:"<strong><code>overrideIdFn</code></strong>",id:"overrideidfn",children:[]},{value:"<strong><code>idInterpolationPattern</code></strong>",id:"idinterpolationpattern",children:[]},{value:"<strong><code>removeDefaultMessage</code></strong>",id:"removedefaultmessage",children:[]},{value:"<strong><code>extractFromFormatMessageCall</code></strong>",id:"extractfromformatmessagecall",children:[]},{value:"<strong><code>additionalComponentNames</code></strong>",id:"additionalcomponentnames",children:[]},{value:"<strong><code>pragma</code></strong>",id:"pragma",children:[]},{value:"<strong><code>ast</code></strong>",id:"ast",children:[]},{value:"Via Node API",id:"via-node-api",children:[]}]}],p={rightToc:b};function d(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Process string messages for translation from modules that use react-intl, specifically:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Parse and verify that messages are ICU-compliant w/o any syntax issues."),Object(o.b)("li",{parentName:"ul"},"Remove ",Object(o.b)("inlineCode",{parentName:"li"},"description")," from message descriptor to save bytes since it isn't used at runtime."),Object(o.b)("li",{parentName:"ul"},"Option to remove ",Object(o.b)("inlineCode",{parentName:"li"},"defaultMessage")," from message descriptor to save bytes since it isn't used at runtime."),Object(o.b)("li",{parentName:"ul"},"Automatically inject message ID based on specific pattern.")),Object(o.b)("h2",{id:"installation"},"Installation"),Object(o.b)(i.a,{groupId:"npm",defaultValue:"npm",values:[{label:"npm",value:"npm"},{label:"yarn",value:"yarn"}],mdxType:"Tabs"},Object(o.b)(l.a,{value:"npm",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"npm i babel-plugin-formatjs\n"))),Object(o.b)(l.a,{value:"yarn",mdxType:"TabItem"},Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"yarn add babel-plugin-formatjs\n")))),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"This Babel plugin only visits ES6 modules which ",Object(o.b)("inlineCode",{parentName:"strong"},"import")," React Intl.")),Object(o.b)("p",null,"The default message descriptors for the app's default language will be processed from: ",Object(o.b)("inlineCode",{parentName:"p"},"defineMessages()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"defineMessage()"),", ",Object(o.b)("inlineCode",{parentName:"p"},"intl.formatMessage")," and ",Object(o.b)("inlineCode",{parentName:"p"},"<FormattedMessage>"),"; all of which are named exports of the React Intl package."),Object(o.b)("h3",{id:"via-babelconfigjson-recommended"},"Via ",Object(o.b)("inlineCode",{parentName:"h3"},"babel.config.json")," (Recommended)"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"babel.config.json")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "plugins": [\n    [\n      "react-intl",\n      {\n        "idInterpolationPattern": "[sha512:contenthash:base64:6]",\n        "extractFromFormatMessageCall": true,\n        "ast": true\n      }\n    ]\n  ]\n}\n')),Object(o.b)("h2",{id:"options"},"Options"),Object(o.b)("h3",{id:"modulesourcename"},Object(o.b)("strong",{parentName:"h3"},Object(o.b)("inlineCode",{parentName:"strong"},"moduleSourceName"))),Object(o.b)("p",null,"The ES6 module source name of the React Intl package. Defaults to: ",Object(o.b)("inlineCode",{parentName:"p"},'"react-intl"'),", but can be changed to another name/path to React Intl."),Object(o.b)("h3",{id:"overrideidfn"},Object(o.b)("strong",{parentName:"h3"},Object(o.b)("inlineCode",{parentName:"strong"},"overrideIdFn"))),Object(o.b)("p",null,"A function with the signature ",Object(o.b)("inlineCode",{parentName:"p"},"(id: string, defaultMessage: string, description: string|object) => string")," which allows you to override the ID both in the extracted javascript and messages."),Object(o.b)("h3",{id:"idinterpolationpattern"},Object(o.b)("strong",{parentName:"h3"},Object(o.b)("inlineCode",{parentName:"strong"},"idInterpolationPattern"))),Object(o.b)("p",null,"If certain message descriptors don't have id, this ",Object(o.b)("inlineCode",{parentName:"p"},"pattern")," will be used to automaticallygenerate IDs for them. Default to ",Object(o.b)("inlineCode",{parentName:"p"},"[contenthash:5]"),". See ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/webpack/loader-utils#interpolatename"}),"https://github.com/webpack/loader-utils#interpolatename")," for sample patterns."),Object(o.b)("h3",{id:"removedefaultmessage"},Object(o.b)("strong",{parentName:"h3"},Object(o.b)("inlineCode",{parentName:"strong"},"removeDefaultMessage"))),Object(o.b)("p",null,"Remove ",Object(o.b)("inlineCode",{parentName:"p"},"defaultMessage")," field in generated js after extraction."),Object(o.b)("h3",{id:"extractfromformatmessagecall"},Object(o.b)("strong",{parentName:"h3"},Object(o.b)("inlineCode",{parentName:"strong"},"extractFromFormatMessageCall"))),Object(o.b)("p",null,"Opt-in to compile ",Object(o.b)("inlineCode",{parentName:"p"},"intl.formatMessage")," call with the same restrictions, e.g: has to be called with object literal such as ",Object(o.b)("inlineCode",{parentName:"p"},"intl.formatMessage({ id: 'foo', defaultMessage: 'bar', description: 'baz'})")),Object(o.b)("h3",{id:"additionalcomponentnames"},Object(o.b)("strong",{parentName:"h3"},Object(o.b)("inlineCode",{parentName:"strong"},"additionalComponentNames"))),Object(o.b)("p",null,"Additional component names to extract messages from, e.g: ",Object(o.b)("inlineCode",{parentName:"p"},"['FormattedFooBarMessage']"),". ",Object(o.b)("strong",{parentName:"p"},"NOTE"),": By default we check for the fact that ",Object(o.b)("inlineCode",{parentName:"p"},"FormattedMessage")," are imported from ",Object(o.b)("inlineCode",{parentName:"p"},"moduleSourceName")," to make sure variable alias works. This option does not do that so it's less safe."),Object(o.b)("h3",{id:"pragma"},Object(o.b)("strong",{parentName:"h3"},Object(o.b)("inlineCode",{parentName:"strong"},"pragma"))),Object(o.b)("p",null,"parse specific additional custom pragma. This allows you to tag certain file with metadata such as ",Object(o.b)("inlineCode",{parentName:"p"},"project"),". For example with this file:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-tsx"}),'// @intl-meta project:my-custom-project\nimport {FormattedMessage} from \'react-intl\'\n;<FormattedMessage defaultMessage="foo" id="bar" />\n')),Object(o.b)("p",null,"and with option ",Object(o.b)("inlineCode",{parentName:"p"},'{pragma: "@intl-meta"}'),", we'll parse out ",Object(o.b)("inlineCode",{parentName:"p"},"// @intl-meta project:my-custom-project")," into ",Object(o.b)("inlineCode",{parentName:"p"},"{project: 'my-custom-project'}")," in the result file."),Object(o.b)("h3",{id:"ast"},Object(o.b)("strong",{parentName:"h3"},Object(o.b)("inlineCode",{parentName:"strong"},"ast"))),Object(o.b)("p",null,"Pre-parse ",Object(o.b)("inlineCode",{parentName:"p"},"defaultMessage")," into AST for faster runtime perf. This flag doesn't do anything when ",Object(o.b)("inlineCode",{parentName:"p"},"removeDefaultMessage")," is ",Object(o.b)("inlineCode",{parentName:"p"},"true"),"."),Object(o.b)("h3",{id:"via-node-api"},"Via Node API"),Object(o.b)("p",null,"The extract message descriptors are available via the ",Object(o.b)("inlineCode",{parentName:"p"},"metadata")," property on the object returned from Babel's ",Object(o.b)("inlineCode",{parentName:"p"},"transform()")," API:"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"require('@babel/core').transform('code', {\n  plugins: ['react-intl'],\n}) // => { code, map, ast, metadata['react-intl'].messages, metadata['react-intl'].meta };\n")))}d.isMDXComponent=!0}}]);