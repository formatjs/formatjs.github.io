(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{102:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},m=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,b=u["".concat(i,".").concat(m)]||u[m]||d[m]||o;return n?r.a.createElement(b,s(s({ref:t},l),{},{components:n})):r.a.createElement(b,s({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},59:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),o=(n(0),n(102)),i={id:"message-distribution",title:"Message Distribution"},s={unversionedId:"getting-started/message-distribution",id:"getting-started/message-distribution",isDocsHomePage:!1,title:"Message Distribution",description:"Now that you've declared your messages, extracted them, sent them to your translation vendor and they have given you back the translated JSON of the same format, it's time to talk about how to distribute & consume the translated JSON.",source:"@site/docs/getting-started/message-distribution.md",permalink:"/docs/getting-started/message-distribution",editUrl:"https://github.com/formatjs/formatjs/edit/master/website/docs/getting-started/message-distribution.md",sidebar:"docs",previous:{title:"Message Extraction",permalink:"/docs/getting-started/message-extraction"},next:{title:"Develop with formatjs",permalink:"/docs/guides/develop"}},c=[{value:"Converting raw format",id:"converting-raw-format",children:[]},{value:"Distribution",id:"distribution",children:[]}],l={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Now that you've declared your messages, extracted them, sent them to your translation vendor and they have given you back the translated JSON of the same format, it's time to talk about how to distribute & consume the translated JSON."),Object(o.b)("h2",{id:"converting-raw-format"},"Converting raw format"),Object(o.b)("p",null,"Let's take the example from ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/getting-started/message-extraction"}),"Message Extraction"),", assuming we are working with the French version and the file is called ",Object(o.b)("inlineCode",{parentName:"p"},"lang/fr.json"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "id": "hak27d",\n    "defaultMessage": "Panneau de configuration",\n    "description": "title of control panel section"\n  },\n  {\n    "id": "haqsd",\n    "defaultMessage": "Supprimer l\'utilisateur {name}",\n    "description": "delete button"\n  },\n  {\n    "id": "19hjs",\n    "defaultMessage": "nouveau mot de passe",\n    "description": "placeholder text"\n  },\n  {\n    "id": "explicit-id",\n    "defaultMessage": "Confirmez le mot de passe",\n    "description": "placeholder text"\n  }\n]\n')),Object(o.b)("p",null,"We can write a small script to convert this to a consumable format:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {outputJSONSync} from 'fs-extra';\nimport {MessageDescriptor} from 'react-intl';\n\n// Read the raw file\nconst messages: MessageDescriptor[] = require('lang/fr.json');\n\n// Convert the raw file into key-value\nconst compiledMessages: Record<string, string> = {};\nfor (const msg of messages) {\n  compiledMessages[msg.id] = msg.defaultMessage;\n}\n\n// Write out the compiled file\noutputJSONSync('compiled-lang/fr.json', compiledMessages);\n")),Object(o.b)("p",null,"The compiled file looks like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "hak27d": "Panneau de configuration",\n  "haqsd": "Supprimer l\'utilisateur {name}",\n  "19hjs": "nouveau mot de passe",\n  "explicit-id": "Confirmez le mot de passe"\n}\n')),Object(o.b)("h2",{id:"distribution"},"Distribution"),Object(o.b)("p",null,"While every application has a separate distribution pipeline, the common theme is the ability to map a locale to its translation file. In this example we'll assume your pipeline can understand dynamic ",Object(o.b)("inlineCode",{parentName:"p"},"import"),":"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"In a React application")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport {IntlProvider} from 'react-intl';\n\nfunction loadLocaleData(locale: string): Promise<Record<string, string>> {\n  switch (locale) {\n    case 'fr':\n      return import('compiled-lang/fr.json');\n    default:\n      return import('compiled-lang/en.json');\n  }\n}\n\nfunction App(props) {\n  return (\n    <IntlProvider\n      locale={props.locale}\n      defaultLocale=\"en\"\n      messages={props.messages}\n    >\n      <MainApp />\n    </IntlProvider>\n  );\n}\n\nasync function bootstrapApplication(locale, mainDiv) {\n  const messages = await loadLocaleData(locale);\n  ReactDOM.render(<App locale={locale} messages={messages} />, mainDiv);\n}\n")),Object(o.b)("ol",{start:2},Object(o.b)("li",{parentName:"ol"},"In a non-React application")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-tsx"}),"import {createIntl, createIntlCache} from 'react-intl';\n\nfunction loadLocaleData(locale: string): Promise<Record<string, string>> {\n  switch (locale) {\n    case 'fr':\n      return import('compiled-lang/fr.json');\n    default:\n      return import('compiled-lang/en.json');\n  }\n}\n\n// A single cache instance can be shared for all locales\nconst intlCache = createIntlCache();\n\nasync function bootstrapApplication(locale) {\n  const messages = await loadLocaleData(locale);\n  const intl = createIntl({locale, messages}, intlCache);\n  // Now the intl object is localized and ready to use\n}\n")))}p.isMDXComponent=!0}}]);